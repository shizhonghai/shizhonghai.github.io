<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是瘦子</title>
  
  <link href="/blog-daily/atom.xml" rel="self"/>
  
  <link href="https://shizhonghai.github.io/blog-daily/"/>
  <updated>2019-12-12T06:35:13.082Z</updated>
  <id>https://shizhonghai.github.io/blog-daily/</id>
  
  <author>
    <name>I am a thin man</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日一题（2019-11-01）</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/12/12/Daily-Interview-Question-3/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/12/12/Daily-Interview-Question-3/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2019-12-12T06:35:13.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-0003-题：webpack-中-loader-和-plugin-的区别是什么"><a href="#第-0003-题：webpack-中-loader-和-plugin-的区别是什么" class="headerlink" title="第 0003 题：webpack 中 loader 和 plugin 的区别是什么"></a>第 0003 题：webpack 中 loader 和 plugin 的区别是什么</h2><p><code>loader</code> 它是一个转换器，将 A 文件进行编译成 B 文件，比如：将 A.less 转换为 A.css，单纯的文件转换过程。<br><code>plugin</code> 是一个扩展器，它丰富了 <code>webpack</code> 本身，针对是 <code>loader</code> 结束后，<code>webpack</code> 打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听 <code>webpack</code> 打包过程中的某些节点，执行广泛的任务</p>
<p>公司：平安</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第-0003-题：webpack-中-loader-和-plugin-的区别是什么&quot;&gt;&lt;a href=&quot;#第-0003-题：webpack-中-loader-和-plugin-的区别是什么&quot; class=&quot;headerlink&quot; title=&quot;第 0003 题：w
    
    </summary>
    
    
      <category term="每日一题" scheme="https://shizhonghai.github.io/blog-daily/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>每日一题（2019-10-29）</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/12/12/Daily-Interview-Question-2/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/12/12/Daily-Interview-Question-2/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2019-12-12T02:06:34.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-0002-题：Vue-中的-computed-和-watch-的区别在哪里"><a href="#第-0002-题：Vue-中的-computed-和-watch-的区别在哪里" class="headerlink" title="第 0002 题：Vue 中的 computed 和 watch 的区别在哪里"></a>第 0002 题：Vue 中的 computed 和 watch 的区别在哪里</h2><p><code>computed</code>：计算属性</p>
<ul>
<li>计算属性是由 <code>data</code> 中的已知值，得到的一个新值。</li>
<li>这个新值只会根据已知值的变化而变化，其他不相关的数据的变化不会影响该新值。</li>
<li>计算属性不在 <code>data</code> 中，计算属性新值的相关已知值在 <code>data</code> 中。</li>
<li>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数。</li>
<li>别人变化影响我自己。</li>
</ul>
<p><code>watch</code>：监听数据的变化</p>
<ul>
<li>监听data中数据的变化。</li>
<li>监听的数据就是data中的已知值。</li>
<li>无缓存性，页面重新渲染时值不变化也会执行。</li>
<li>我的变化影响别人。</li>
</ul>
<p>公司：虾皮</p>
<blockquote>
<ol>
<li><code>watch</code> 擅长处理的场景：一个数据影响多个数据</li>
<li><code>computed</code> 擅长处理的场景：一个数据受多个数据影响</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第-0002-题：Vue-中的-computed-和-watch-的区别在哪里&quot;&gt;&lt;a href=&quot;#第-0002-题：Vue-中的-computed-和-watch-的区别在哪里&quot; class=&quot;headerlink&quot; title=&quot;第 0002 题：Vue 中
    
    </summary>
    
    
      <category term="每日一题" scheme="https://shizhonghai.github.io/blog-daily/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>解决 Hexo Cannot find module &#39;./build/Release/DTraceProviderBindings&#39; 错误</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/12/12/hexo-error-DTraceProviderBindings/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/12/12/hexo-error-DTraceProviderBindings/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2019-12-12T06:59:06.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-报错"><a href="#hexo-报错" class="headerlink" title="hexo 报错"></a>hexo 报错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</span><br></pre></td></tr></table></figure>
<h2 id="解决办法-on-google"><a href="#解决办法-on-google" class="headerlink" title="解决办法 on google"></a>解决办法 on google</h2><p>google之后发现被这个问题困扰的小伙伴还真不少，网上最靠谱的解决办法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure>
<p>的确很多小伙伴执行上面的命令之后都解决了报错的问题，但也有很多小伙伴跟我一样执行后没有任何效果，我甚至尝试了卸载后重装的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo</span><br><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure>
<p>可是依旧没有效果。<br>其实 hexo 暂时并没有用到 <code>dtrace-prodider</code> ，仅仅是报错而已，hexo 的命令还是能执行，但对于强迫症来说，简直无法忍受。</p>
<p>我的解决办法<br>一番折腾之后，我找到了适合我的解决办法，重装 <code>hexo-cli</code>，如果命令行报没权限错误，请记得前面加 <code>sudo</code> :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-cli -g</span><br><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>再来执行 hexo 命令果然没有报错信息了:D</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo-报错&quot;&gt;&lt;a href=&quot;#hexo-报错&quot; class=&quot;headerlink&quot; title=&quot;hexo 报错&quot;&gt;&lt;/a&gt;hexo 报错&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
    
      <category term="hexo" scheme="https://shizhonghai.github.io/blog-daily/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>自定义 Echarts 图表悬浮框的位置</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/08/12/echarts-tooltip/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/08/12/echarts-tooltip/</id>
    <published>2019-08-11T16:00:00.000Z</published>
    <updated>2019-08-12T09:54:08.811Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目需求，悬浮框内容较多，会出现悬浮框(tooltip)很长或者很宽的现象，而太长了，就会被 Echarts 溢出隐藏了，所以需要自定义定位需求</p>
<blockquote>
<p>需求描述：鼠标悬浮在左侧某一个点时，悬浮框悬停在点的右侧；鼠标悬停在右侧某一个点时，悬浮框悬停在点的左侧。</p>
</blockquote>
<p>首先明确一点，我们需要借助 <code>tooltip.position</code> 属性。理想的思路是我们在回调函数中获取鼠标每次悬停的坐标，然后再判断这个坐标是否处于此容器(也就是这个Echarts图表)的左侧或者右侧；判断命中后我们再改变 <code>tooltip</code> 的位置，并返回给函数。</p>
<a id="more"></a>
<p>效果图：【左侧悬浮】<br><img src="/images/echart_01@2x.png" alt="左侧悬浮"></p>
<p>效果图：【右侧悬浮】<br><img src="/images/echart_02@2x.png" alt="左侧悬浮"></p>
<p>效果图：【溢出显示】<br><img src="/images/echart_03@2x.png" alt="溢出显示"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关健代码</span></span><br><span class="line">tooltip: &#123;</span><br><span class="line">    position: <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'chartDom'</span>);</span><br><span class="line">        <span class="keyword">if</span> (dom) &#123;</span><br><span class="line">            <span class="comment">// 获取容器的宽度</span></span><br><span class="line">            <span class="keyword">let</span> chartsWidth = dom.offsetWidth;</span><br><span class="line">            <span class="comment">// 判断悬停点落在容器的哪测</span></span><br><span class="line">            <span class="keyword">if</span> (position[<span class="number">0</span>] &lt; (chartsWidth / <span class="number">2</span>)) &#123;</span><br><span class="line">                position[<span class="number">0</span>] = position[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                position[<span class="number">0</span>] = position[<span class="number">0</span>] - <span class="number">130</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [position[<span class="number">0</span>], position[<span class="number">1</span>]];</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目需求，悬浮框内容较多，会出现悬浮框(tooltip)很长或者很宽的现象，而太长了，就会被 Echarts 溢出隐藏了，所以需要自定义定位需求&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需求描述：鼠标悬浮在左侧某一个点时，悬浮框悬停在点的右侧；鼠标悬停在右侧某一个点时，悬浮框悬停在点的左侧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先明确一点，我们需要借助 &lt;code&gt;tooltip.position&lt;/code&gt; 属性。理想的思路是我们在回调函数中获取鼠标每次悬停的坐标，然后再判断这个坐标是否处于此容器(也就是这个Echarts图表)的左侧或者右侧；判断命中后我们再改变 &lt;code&gt;tooltip&lt;/code&gt; 的位置，并返回给函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Echarts" scheme="https://shizhonghai.github.io/blog-daily/tags/Echarts/"/>
    
  </entry>
  
  <entry>
    <title>React 生命周期</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/08/02/react-component/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/08/02/react-component/</id>
    <published>2019-08-01T16:00:00.000Z</published>
    <updated>2019-08-02T03:05:34.171Z</updated>
    
    <content type="html"><![CDATA[<p>防止自己忘掉 <code>React</code> 的一些生命周期方法，方便自己回忆和查阅。</p>
<h2 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a><code>componentDidUpdate()</code></h2><blockquote>
<p><code>componentDidUpdate(prevProps, prevState, snapshot)</code></p>
</blockquote>
<p><code>componentDidUpdate()</code> 会在更新后会被立即调用。首次渲染不会执行此方法。</p>
<p>当组件更新后，可以在此处对 DOM 进行操作。如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求。（例如，当 props 未发生变化时，则不会执行网络请求）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps) &#123;</span><br><span class="line">  <span class="comment">// 典型用法（不要忘记比较 props）：</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.props.userID !== prevProps.userID) &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData(<span class="keyword">this</span>.props.userID);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你也可以在 <code>componentDidUpdate()</code> 中直接调用 <code>setState()</code>，但请注意它必须被包裹在一个条件语件里，正如上述的例子那样进行处理，否则会导致死循环。它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。不要将 <code>props</code> “镜像”给 <code>state</code>，请考虑直接使用 <code>props</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防止自己忘掉 &lt;code&gt;React&lt;/code&gt; 的一些生命周期方法，方便自己回忆和查阅。&lt;/p&gt;
&lt;h2 id=&quot;componentDidUpdate&quot;&gt;&lt;a href=&quot;#componentDidUpdate&quot; class=&quot;headerlink&quot; title=&quot;co
    
    </summary>
    
    
      <category term="React" scheme="https://shizhonghai.github.io/blog-daily/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>CSS 技巧</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/07/26/CSS-skill/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/07/26/CSS-skill/</id>
    <published>2019-07-25T16:00:00.000Z</published>
    <updated>2019-08-02T02:59:15.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="padding-配合-background-clip-属性，可以制作一些特殊形状："><a href="#padding-配合-background-clip-属性，可以制作一些特殊形状：" class="headerlink" title="padding 配合 background-clip 属性，可以制作一些特殊形状："></a><code>padding</code> 配合 <code>background-clip</code> 属性，可以制作一些特殊形状：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*三道杠*/</span></span><br><span class="line"><span class="selector-class">.icon1</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">2px</span> solid currentColor;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid currentColor;</span><br><span class="line">  <span class="attribute">background</span>: currentColor; <span class="comment">/*注意如果此处背景颜色属性用缩写的话，需要放到其他背景属性的前面，否则会覆盖前面的属性值（此处为background-clip）为默认值*/</span></span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*双层圆点*/</span></span><br><span class="line"><span class="selector-class">.icon2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid currentColor;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: currentColor;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<style>
.icon1 {
  box-sizing: border-box;
  display: inline-block;
  width: 12px;
  height: 10px;
  padding: 2px 0;
  margin-right: 20px;
  border-top: 2px solid currentColor;
  border-bottom: 2px solid currentColor;
  background: currentColor;
  background-clip: content-box;
}

/*双层圆点*/
.icon2 {
  display: inline-block;
  width: 12px;
  height: 12px;
  padding: 2px;
  border: 2px solid currentColor;
  border-radius: 50%;
  background-color: currentColor;
  background-clip: content-box;
}
</style>

<p>实时预览如下：（<code>currentColor</code> 是 <code>css</code> 中为数不多的变量，指当前文字的颜色值，非常好用）</p>
<div style="text-align: center;"><div class="icon1"></div><div class="icon2"></div></div>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;padding-配合-background-clip-属性，可以制作一些特殊形状：&quot;&gt;&lt;a href=&quot;#padding-配合-background-clip-属性，可以制作一些特殊形状：&quot; class=&quot;headerlink&quot; title=&quot;padding 配合
    
    </summary>
    
    
      <category term="CSS" scheme="https://shizhonghai.github.io/blog-daily/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 名词解释</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/07/18/javascript-glossary/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/07/18/javascript-glossary/</id>
    <published>2019-07-17T16:00:00.000Z</published>
    <updated>2019-07-18T02:19:20.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量提升（hoisting）"><a href="#变量提升（hoisting）" class="headerlink" title="变量提升（hoisting）"></a>变量提升（hoisting）</h2><p><code>var</code> 命令会发生“变量提升”现象，即变量可以在声明之前使用，值为<code>undefined</code></p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量提升（hoisting）&quot;&gt;&lt;a href=&quot;#变量提升（hoisting）&quot; class=&quot;headerlink&quot; title=&quot;变量提升（hoisting）&quot;&gt;&lt;/a&gt;变量提升（hoisting）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt; 命令会发生“变量提升”现象，即变量可以在声明之前使用，值为&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://shizhonghai.github.io/blog-daily/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>每日一题（2019-07-18）</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/07/18/Daily-Interview-Question-1/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/07/18/Daily-Interview-Question-1/</id>
    <published>2019-07-17T16:00:00.000Z</published>
    <updated>2019-12-12T01:57:24.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-0001-题：请写出如下代码的打印结果"><a href="#第-0001-题：请写出如下代码的打印结果" class="headerlink" title="第 0001 题：请写出如下代码的打印结果"></a>第 0001 题：请写出如下代码的打印结果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Tom'</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">'Jack'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Goodbye '</span> + name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>公司：京东</p>
<a id="more"></a>
<blockquote>
<p>【答案】：<code>Goodbye Jack</code><br>  【解析】：<code>var</code> 关键字有变量提升，它定义的变量会提升到函数的顶部。题目中立即执行函数的中的变量 <code>name</code> 的定义被提升到了顶部，并在初始化赋值之前是 <code>undefined</code>，所以 <code>typeof name == &#39;undefined</code>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第-0001-题：请写出如下代码的打印结果&quot;&gt;&lt;a href=&quot;#第-0001-题：请写出如下代码的打印结果&quot; class=&quot;headerlink&quot; title=&quot;第 0001 题：请写出如下代码的打印结果&quot;&gt;&lt;/a&gt;第 0001 题：请写出如下代码的打印结果&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;Tom&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; name == &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Goodbye &#39;&lt;/span&gt; + name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; + name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;公司：京东&lt;/p&gt;
    
    </summary>
    
    
      <category term="每日一题" scheme="https://shizhonghai.github.io/blog-daily/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>可能是你需要的 react + typescript 50条规范和经验</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/07/11/react-typescript/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/07/11/react-typescript/</id>
    <published>2019-07-10T16:00:00.000Z</published>
    <updated>2019-07-11T09:48:48.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="文件顶部的注释，包括描述、作者、日期"><a href="#文件顶部的注释，包括描述、作者、日期" class="headerlink" title="文件顶部的注释，包括描述、作者、日期"></a>文件顶部的注释，包括描述、作者、日期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description xxxxxx</span></span><br><span class="line"><span class="comment"> * @author chengfeng</span></span><br><span class="line"><span class="comment"> * @since 19/05/21</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="模块的注释"><a href="#模块的注释" class="headerlink" title="模块的注释"></a>模块的注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝数据</span></span><br><span class="line"><span class="comment"> * @param  &#123;*&#125;  data   要拷贝的源数据</span></span><br><span class="line"><span class="comment"> * @param  &#123;boolean&#125; [isDeep=false] 是否深拷贝，默认浅拷贝</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;         返回拷贝后的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="业务代码注释"><a href="#业务代码注释" class="headerlink" title="业务代码注释"></a>业务代码注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*业务代码注释*/</span></span><br></pre></td></tr></table></figure>
<h3 id="变量注释"><a href="#变量注释" class="headerlink" title="变量注释"></a>变量注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  <span class="comment">// 名字</span></span><br><span class="line">  name: string;</span><br><span class="line">  <span class="comment">// 电话</span></span><br><span class="line">  phone: number;</span><br><span class="line">  <span class="comment">// 地址</span></span><br><span class="line">  address: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="引用组件顺序"><a href="#引用组件顺序" class="headerlink" title="引用组件顺序"></a>引用组件顺序</h2><ul>
<li>先引用外部组件库,,再引用当前组件块级组件, 然后是 common 里的公共函数库最后是 css 样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dropdown, Menu, Icon &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./Header'</span>;</span><br><span class="line"><span class="keyword">import</span> toast <span class="keyword">from</span> <span class="string">'common/toast'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><ul>
<li>使用单引号,或者 es6 的反引号</li>
</ul>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><ul>
<li>使用两个空格</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleCheck = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  onCancel &amp;&amp; onCancel();</span><br><span class="line">  onClose &amp;&amp; onClose();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><ul>
<li>每行末尾都要加分号。</li>
</ul>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>do</code>, <code>switch</code>, <code>try</code>, <code>catch</code>, <code>finally</code>, <code>with</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// not good</span></span><br><span class="line"><span class="keyword">if</span> (condition) doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul>
<li>二元和三元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">++ x;</span><br><span class="line">y ++;</span><br><span class="line">z = x?<span class="number">1</span>:<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">++x;</span><br><span class="line">y++;</span><br><span class="line">z = x ? <span class="number">1</span> : <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>用作代码块起始的左花括号 { 前必须有一个空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>if</code> / <code>else</code> / <code>for</code> / <code>while</code> / <code>function</code> / <code>switch</code> / <code>do</code> / <code>try</code> / <code>catch</code> / <code>finally</code> 关键字后，必须有一个空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<ul>
<li>在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c :<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ul>
<li>每个独立语句结束后必须换行。</li>
<li>在函数声明、函数表达式、函数调用、对象创建、数组创建、for 语句等场景中，不允许在 , 或 ; 前换行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">    , <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">    , <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> object)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span> (object.hasOwnProperty(key)) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = object[key];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> object) &#123;</span><br><span class="line">  <span class="keyword">if</span> (object.hasOwnProperty(key)) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = object[key];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>下列关键字后：else, catch, finally 不需要换行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组、对象"><a href="#数组、对象" class="headerlink" title="数组、对象"></a>数组、对象</h2><ul>
<li>对象属性名不需要加引号；</li>
<li>对象以缩进的形式书写，不要写在一行；</li>
<li>数组最后不要有逗号。</li>
<li>对象最后要有逗号。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    <span class="string">'b'</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul>
<li>类名: 大驼峰式风格，字母和数字，例如：AbcTest。禁止汉字、特殊符号，禁止非大驼峰式风格。</li>
<li>函数名: 小驼峰式风格，字母和数字，例如：abcTest。禁止汉字、特殊符号，禁止非小驼峰式风格，例如snake_case等。</li>
<li>变量名: 同函数名。</li>
<li>常量: 全大写风格，大写字母、数字和下划线，单词之间以下划线分隔，例如：ABC_TEST。禁止汉字、特殊符号、小写字母。</li>
<li>使用 onXxx 形式作为 props 中用于回调的属性名称。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  onClose?: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  onOk?: <span class="function">(<span class="params">item: Record&lt;string, any&gt;</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>组件内的事件函数使用 handle 开头尾,handleCheckBtn。</li>
<li>使用 withXxx 形式的词作为高阶组件的名称。</li>
<li>接口命名前面带上 I 表示 interface</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;&#125;</span><br><span class="line">interface IState &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (something.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> something.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="interface声明顺序"><a href="#interface声明顺序" class="headerlink" title="interface声明顺序"></a>interface声明顺序</h2><p>日常用到比较多的是四种，只读参数放第一位，必选参数第二位，可选参数次之，不确定参数放最后<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iProps &#123;</span><br><span class="line">  readonly x: <span class="built_in">number</span>;</span><br><span class="line">  readonly y: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  height?: <span class="built_in">number</span>;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ts好用的相关工具泛型"><a href="#ts好用的相关工具泛型" class="headerlink" title="ts好用的相关工具泛型"></a>ts好用的相关工具泛型</h2><ul>
<li><code>Record&lt;string,any&gt;</code> 用这个来声明对象结构的类型</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于定义一个javascript的对象，key是字符串，value是任意类型</span></span><br><span class="line"><span class="keyword">const</span> people:Record&lt;<span class="built_in">string</span>,<span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">    name: <span class="string">'chengfeng'</span>,</span><br><span class="line">    age: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Partial</code> 作用是将传入的属性变为可选项.</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iPeople &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people: Partial&lt;Todo&gt; = &#123;</span><br><span class="line">    title: <span class="string">'Delete inactive users'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">定义的结构可以是接口iPeople的任意key</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Readonly</code> 作用是将传入的属性变为变成只读</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iPeople &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people: Readonly&lt;Todo&gt; = &#123;</span><br><span class="line">    title: <span class="string">'todo list'</span>,</span><br><span class="line">    name: <span class="string">'chenfeng'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">title name属性就是只读的了</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Required</code> 的作用是将传入的属性变为必选项</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iPeople &#123;</span><br><span class="line">    title?: <span class="built_in">string</span>;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> people1: Props = &#123; title: <span class="string">'ts'</span> &#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> people22: Required&lt;iPeople&gt; = &#123; title: <span class="string">'ts'</span> &#125;; <span class="comment">// Error: property 'name' missing</span></span><br></pre></td></tr></table></figure>
<h2 id="ts一些好用的小tips"><a href="#ts一些好用的小tips" class="headerlink" title="ts一些好用的小tips"></a>ts一些好用的小tips</h2><ul>
<li><code>keyof</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iPeople &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T = keyof iPeople <span class="comment">// -&gt; "name" | "age"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>in</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Keys = <span class="string">"a"</span> | <span class="string">"b"</span></span><br><span class="line"><span class="keyword">type</span> Obj =  &#123;</span><br><span class="line">  [p <span class="keyword">in</span> Keys]: <span class="built_in">any</span></span><br><span class="line">&#125; <span class="comment">// -&gt; &#123; a: any, b: any &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="规范其他"><a href="#规范其他" class="headerlink" title="规范其他"></a>规范其他</h2><ul>
<li>不要使用 var 声明变量</li>
<li>不会被修改的变量使用 const 声明</li>
<li>去除声明但未被引用的代码</li>
<li>禁止在代码里使用 debug</li>
<li>不允许有空的代码块</li>
</ul>
<h2 id="仅当初始-state-需要从-props-计算得到的时候，才将-state-的声明放在构造函数中，其它情况下使用静态属性声明-state-并且一般情况下不要将-prop-传给-state，"><a href="#仅当初始-state-需要从-props-计算得到的时候，才将-state-的声明放在构造函数中，其它情况下使用静态属性声明-state-并且一般情况下不要将-prop-传给-state，" class="headerlink" title="仅当初始 state 需要从 props 计算得到的时候，才将 state 的声明放在构造函数中，其它情况下使用静态属性声明 state,并且一般情况下不要将 prop 传给 state，"></a>仅当初始 state 需要从 props 计算得到的时候，才将 state 的声明放在构造函数中，其它情况下使用静态属性声明 state,并且一般情况下不要将 prop 传给 state，</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">constructor</span> ()&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; people: <span class="keyword">this</span>.props.people &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">state: IState = &#123;</span><br><span class="line">  people: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="渲染默认值"><a href="#渲染默认值" class="headerlink" title="渲染默认值"></a>渲染默认值</h2><ul>
<li>添加非空判断可以提高代码的稳健性,例如后端返回的一些值,可能会出现不存在的情况，应该要给默认值.</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">render()&#123;</span><br><span class="line">  &#123;name&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">render()&#123;</span><br><span class="line">  &#123;name || <span class="string">''</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>还有一种情况，就是本来后端应该返回一个数组给你，但是数据库取不到数据，可能后端给你返回了null,然后前端null.length。这样就gg了</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> &#123; list, totalCount &#125; = await getPeopleList(keyword, page, pageSize);</span><br><span class="line">list 可能是<span class="literal">null</span>或者<span class="literal">undefined</span></span><br><span class="line">list.length将直接导致前端报错</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  status: STATUS.READY,</span><br><span class="line">  apps: list,</span><br><span class="line">  total: totalCount,</span><br><span class="line">  page: page,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good </span></span><br><span class="line"><span class="keyword">const</span> &#123; list, totalCount &#125; = await getPeopleList(keyword, page, pageSize);</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  status: STATUS.READY,</span><br><span class="line">  apps: list || [],</span><br><span class="line">  total: totalCount || <span class="number">0</span>,</span><br><span class="line">  page: page,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="不确定的属性，最后却疯狂的用…访问不存在的属性"><a href="#不确定的属性，最后却疯狂的用…访问不存在的属性" class="headerlink" title="不确定的属性，最后却疯狂的用…访问不存在的属性"></a>不确定的属性，最后却疯狂的用…访问不存在的属性</h2><p>例如一些地方，不确定这个变量里面到底有什么，但自己觉得有，就疯狂的…,最明显的就是后端返回了一个对象给你，前端拿到之后判断都不判断直接 <code>data.dataList.forEach()</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> getPeopleList(keyword, page, pageSize);</span><br><span class="line">data.dataList.forEach() <span class="comment">// 直接挂了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> getPeopleList(keyword, page, pageSize);</span><br><span class="line"><span class="keyword">if</span> (data &amp;&amp; data.dataList &amp;&amp; <span class="built_in">Array</span>.isArray(data.dataList) &#123;</span><br><span class="line">    data.dataList.forEach() </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="数据格式转换"><a href="#数据格式转换" class="headerlink" title="数据格式转换"></a>数据格式转换</h2><h3 id="把字符串转整型可以使用-号"><a href="#把字符串转整型可以使用-号" class="headerlink" title="把字符串转整型可以使用 + 号"></a>把字符串转整型可以使用 <code>+</code> 号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> maxPrice = +form.maxPrice.value;</span><br><span class="line"><span class="keyword">let</span> maxPrice = <span class="built_in">Number</span>(form.maxPrice.value);</span><br></pre></td></tr></table></figure>
<h3 id="转成-boolean-值用"><a href="#转成-boolean-值用" class="headerlink" title="转成 boolean 值用 !!"></a>转成 <code>boolean</code> 值用 <code>!!</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mobile = !!ua.match(<span class="regexp">/iPhone|iPad|Android|iPod|Windows Phone/</span>);</span><br></pre></td></tr></table></figure>
<h2 id="判断条件真假"><a href="#判断条件真假" class="headerlink" title="判断条件真假"></a>判断条件真假</h2><p>js 中以下为假,其他情况为真</p>
<ul>
<li>false</li>
<li>null</li>
<li>undefined</li>
<li>0</li>
<li>‘’ (空字符串)</li>
<li>NaN</li>
</ul>
<h2 id="简单组件可以使用函数代替"><a href="#简单组件可以使用函数代替" class="headerlink" title="简单组件可以使用函数代替"></a>简单组件可以使用函数代替</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listing</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.props.hello&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listing</span>(<span class="params">&#123; hello &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;hello&#125;&lt;/div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对于常用的属性进行缓存"><a href="#对于常用的属性进行缓存" class="headerlink" title="对于常用的属性进行缓存"></a>对于常用的属性进行缓存</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.props.app.openid;</span><br><span class="line"><span class="keyword">this</span>.state.time</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="keyword">const</span> &#123; time &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"><span class="built_in">console</span>.log(app.openid)</span><br></pre></td></tr></table></figure>
<h2 id="input-输入框使用-trim"><a href="#input-输入框使用-trim" class="headerlink" title="input 输入框使用 trim()"></a>input 输入框使用 trim()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.props.app.openid;</span><br><span class="line"><span class="keyword">this</span>.state.time</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="keyword">const</span> &#123; time &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"><span class="built_in">console</span>.log(app.openid)</span><br></pre></td></tr></table></figure>
<h2 id="使用-location-跳转前需要先转义"><a href="#使用-location-跳转前需要先转义" class="headerlink" title="使用 location 跳转前需要先转义"></a>使用 location 跳转前需要先转义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">window</span>.location.href = redirectUrl + <span class="string">'?a=10&amp;b=20'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">window</span>.location.href = redirectUrl + <span class="built_in">encodeURIComponent</span>(<span class="string">'?a=10&amp;b=20'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="同时开发，数据请求-api-目录-git-冲突目录方案"><a href="#同时开发，数据请求-api-目录-git-冲突目录方案" class="headerlink" title="同时开发，数据请求 api 目录 git 冲突目录方案"></a>同时开发，数据请求 api 目录 git 冲突目录方案</h2><p>在 api 目录下新建一个目录，目录对应一级 tab,这个目录内放置一个 index.js ，最后把二级 tab 组件所使用的 api 请求都在这个 index.js 内引入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前</span></span><br><span class="line"></span><br><span class="line">|- api</span><br><span class="line">  |- pageA.ts</span><br><span class="line">  |- pageB.ts</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议</span></span><br><span class="line"></span><br><span class="line">|- api</span><br><span class="line">  |- pageA</span><br><span class="line">    |- index.js</span><br><span class="line">    |- aaa.js</span><br><span class="line">    |- bbb.js</span><br><span class="line">  |- pageB</span><br><span class="line">    |- index.js</span><br><span class="line">    |- aaa.js</span><br><span class="line">    |- bbb.js</span><br><span class="line">    |- ccc.js</span><br></pre></td></tr></table></figure></p>
<h2 id="组件嵌套过深"><a href="#组件嵌套过深" class="headerlink" title="组件嵌套过深"></a>组件嵌套过深</h2><p>组件一般不要超过三层,最多四层,层级过深可能会导致数据传递过深，在做一些颗粒度比较细的操作的时候，处理起来较为繁琐，可以使用 redux 等状态管理工具替代。</p>
<h2 id="代码过滤掉你没考虑到的情况"><a href="#代码过滤掉你没考虑到的情况" class="headerlink" title="代码过滤掉你没考虑到的情况"></a>代码过滤掉你没考虑到的情况</h2><p>例如一个函数，你只想操作字符串，那你必须在函数开头就只允许参数是字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params">str:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span>(str) === <span class="string">'string'</span> ) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="业务代码里面的异步请求需要-try-catch"><a href="#业务代码里面的异步请求需要-try-catch" class="headerlink" title="业务代码里面的异步请求需要 try catch"></a>业务代码里面的异步请求需要 try catch</h2><p>ajax 请求，使用 try catch，错误提示后端返回,并且做一些失败后的状态操作例如进入列表页，我们需要一个 loading 状态，然后去请求数据,可是失败之后，也需要把 loading 状态去掉,把 loading 隐藏的代码就写在 finally 里面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">getStudentList = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">true</span>,</span><br><span class="line">      isEmpty: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> getStudentList(&#123;&#125;);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      isEmpty: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//  失败之后的一些兜底操作</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      isEmpty: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="setState有三种用法"><a href="#setState有三种用法" class="headerlink" title="setState有三种用法"></a>setState有三种用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数，一般是用于在setState之前做一些操作</span></span><br><span class="line"><span class="keyword">this</span>.setState(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      a:<span class="number">300</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数，一般是用于在setState之后做一些操作</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  a:<span class="number">300</span></span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="setState可能是同步的"><a href="#setState可能是同步的" class="headerlink" title="setState可能是同步的"></a>setState可能是同步的</h2><ul>
<li>setState 在react里的合成事件和钩子函数中是“异步”的。</li>
<li>setState 在原生事件和 setTimeout 中是同步的。</li>
</ul>
<h2 id="不要在-setState-前面加-await"><a href="#不要在-setState-前面加-await" class="headerlink" title="不要在 setState 前面加 await"></a>不要在 setState 前面加 await</h2><p>setState 前面也是可以带 await 的，会变成同步设置状态,但这是一种巧合，不确定未来哪个版本就不支持了，为了遵循 react 框架的设计原则，我们使用回掉函数的形式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">func = <span class="keyword">async</span> (name, value, status) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">func = <span class="function">(<span class="params">name, value, status</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(</span><br><span class="line">    &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="阻止事件默认行为"><a href="#阻止事件默认行为" class="headerlink" title="阻止事件默认行为"></a>阻止事件默认行为</h2><p>在 React 中你不能通过返回 false 来阻止默认行为。必须明确调用 preventDefault 。</p>
<h2 id="在-componentWillUnmount-里面去除副作用的函数"><a href="#在-componentWillUnmount-里面去除副作用的函数" class="headerlink" title="在 componentWillUnmount 里面去除副作用的函数"></a>在 componentWillUnmount 里面去除副作用的函数</h2><ul>
<li>清除 EventListener</li>
<li>中止数据请求</li>
<li>清除定时器</li>
</ul>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>对于组件中的 key 优化，起到最大化重用 dom</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">this</span>.state.dataAry.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;span key=&#123;index&#125; /&gt;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//good</span><br><span class="line">this.state.dataAry.map(item =&gt; &lt;span key=&#123;item.id&#125; /&gt;);</span><br></pre></td></tr></table></figure>
<h2 id="for-in-中一定要有-hasOwnProperty-的判断（即禁止直接读取原型对象的属性）"><a href="#for-in-中一定要有-hasOwnProperty-的判断（即禁止直接读取原型对象的属性）" class="headerlink" title="for-in 中一定要有 hasOwnProperty 的判断（即禁止直接读取原型对象的属性）"></a>for-in 中一定要有 hasOwnProperty 的判断（即禁止直接读取原型对象的属性）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  arr.push(obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//good</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">    arr.push(obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第三方库函数的使用"><a href="#第三方库函数的使用" class="headerlink" title="第三方库函数的使用"></a>第三方库函数的使用</h2><p>用 try catch 包裹，防止第三方库的出现错误，导致整个程序崩溃</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Echart 用于代绘制图表，但当其自身发生错误时，可能影响到业务代码的执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> iniDom = <span class="built_in">document</span>.getElementById(<span class="string">'init-container'</span>);</span><br><span class="line"><span class="keyword">const</span> echartObj = echarts.init(iniDom);</span><br><span class="line"><span class="keyword">this</span>.setState(</span><br><span class="line">  &#123;</span><br><span class="line">    echartObj</span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; echartObj &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="comment">// 更新图表</span></span><br><span class="line">    echartObj.setOption(CHART_CONFIG, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> iniDom = <span class="built_in">document</span>.getElementById(<span class="string">'init-container'</span>);</span><br><span class="line">  <span class="keyword">const</span> echartObj = echarts.init(iniDom);</span><br><span class="line">  <span class="keyword">this</span>.setState(</span><br><span class="line">    &#123;</span><br><span class="line">      echartObj</span><br><span class="line">    &#125;,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; echartObj &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">      <span class="comment">// 更新图表</span></span><br><span class="line">      echartObj.setOption(CHART_CONFIG, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="防止-xss-攻击"><a href="#防止-xss-攻击" class="headerlink" title="防止 xss 攻击"></a>防止 xss 攻击</h2><p>input，textarea 等标签，不要直接把 html 文本直接渲染在页面上,使用 xssb 等过滤之后再输出到标签上;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; html2text &#125; <span class="keyword">from</span> <span class="string">'xss'</span>;</span><br><span class="line">render()&#123;</span><br><span class="line">  &lt;div</span><br><span class="line">  dangerouslySetInnerHTML=&#123;&#123;</span><br><span class="line">    __html: html2text(htmlContent)</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在组件中获取真实-dom"><a href="#在组件中获取真实-dom" class="headerlink" title="在组件中获取真实 dom"></a>在组件中获取真实 dom</h2><p>使用 16 版本后的 createRef()函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">iProps</span>, <span class="title">iState</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.inputRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;input type="text" ref=&#123;this.inputRef&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.inputRef.current.focus();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="减少魔法数字"><a href="#减少魔法数字" class="headerlink" title="减少魔法数字"></a>减少魔法数字</h2><p>写代码的时候尽量减少一些未知含义的数字，尽量用英文单词。例如type === 0的时候做了一些操作，让人不知所以然。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (type !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> STATUS: Record&lt;string, any&gt; = &#123;</span><br><span class="line">  READY: <span class="number">0</span>,</span><br><span class="line">  FETCHING: <span class="number">1</span>,</span><br><span class="line">  FAILED: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type === STATUS.READY) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">enum STATUS &#123;</span><br><span class="line">  <span class="comment">// 就绪</span></span><br><span class="line">  READY = <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 请求中</span></span><br><span class="line">  FETCHING = <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// 请求失败</span></span><br><span class="line">  FAILED = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如果需要优化-react-性能（一般用不到）"><a href="#如果需要优化-react-性能（一般用不到）" class="headerlink" title="如果需要优化 react 性能（一般用不到）"></a>如果需要优化 react 性能（一般用不到）</h2><p>如果组件的 state 和 props 都是简单类型，可以继承 PureComponent 而不是 Component</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;span&gt;&#123;this.state.message&#125;&lt;/span&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;span&gt;&#123;this.state.message&#125;&lt;/span&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Event-事件对象类型"><a href="#Event-事件对象类型" class="headerlink" title="Event 事件对象类型"></a>Event 事件对象类型</h2><p>很多小伙伴用了很久的ts,都不知道常用 Event 事件对象类型：<br>ClipboardEvent<t = element> 剪贴板事件对象<br>DragEvent<t = element> 拖拽事件对象<br>ChangeEvent<t = element> Change 事件对象<br>KeyboardEvent<t = element> 键盘事件对象<br>MouseEvent<t = element> 鼠标事件对象<br>TouchEvent<t = element> 触摸事件对象<br>WheelEvent<t = element> 滚轮事件对象<br>AnimationEvent<t = element> 动画事件对象<br>TransitionEvent<t = element> 过渡事件对象</t></t></t></t></t></t></t></t></t></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MouseEvent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  onClick(event: MouseEvent&lt;HTMLDivElement&gt;): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用私有属性取代state状态"><a href="#使用私有属性取代state状态" class="headerlink" title="使用私有属性取代state状态"></a>使用私有属性取代state状态</h2><p>对于一些不需要控制ui的状态属性，我们可以直接绑到this上， 即私有属性，没有必要弄到this.state上，不然会触发渲染机制，造成性能浪费 例如请求翻页数据的时候,我们都会有个变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">state: IState = &#123;</span><br><span class="line">  pageNo:<span class="number">1</span>,</span><br><span class="line">  pageSize:<span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good </span></span><br><span class="line">queryParams:Record&lt;string,any&gt; = &#123;</span><br><span class="line">  pageNo:<span class="number">1</span>,</span><br><span class="line">  pageSize:<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代码细粒度的思考"><a href="#代码细粒度的思考" class="headerlink" title="代码细粒度的思考"></a>代码细粒度的思考</h2><p>总结四句话。我们在写组件或者函数的的时候，工具函数和业务逻辑抽离，表单校验和业务抽离、事件函数和业务抽离，ajax和业务抽离。<br>例如有些页面是通过location.href跳转的，我们有些业务逻辑等都是放到didmountMount,但是后期改需求，可能要用react-router进行跳转，可能要改的逻辑就会很多了，所以函数抽离出来，需求更新就少改一点代码。<br>如果还不确定如何划分函数的细粒度，我有个建议。使用过两次以上的代码，要抽离组件或者函数，两次的可以不用</p>
<h2 id="if-else-等判断太多了，后期难以维护。"><a href="#if-else-等判断太多了，后期难以维护。" class="headerlink" title="if else 等判断太多了，后期难以维护。"></a>if else 等判断太多了，后期难以维护。</h2><p>个人觉得if else 嵌套深看起来也不会太难受，难受的是，项目迭代久之后，自己都忘记曾经写过这些代码，而且类型多或者不确定有什么类型，是否后期还会加的情况下，改起来就非常复杂了，而且很容易踩坑和背锅。<br>用配置取代if嵌套，大概就是抽离一个config.ts出来，里面放一些配置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">例如你的业务代码里面，会根据不同url参数，代码会执行不同的逻辑.</span><br><span class="line">/info?type=wechat&amp;uid=<span class="number">123456</span>&amp;</span><br><span class="line"><span class="keyword">const</span> qsObj = qs(<span class="built_in">window</span>.location.url)</span><br><span class="line"><span class="keyword">const</span> urlType = qsObj.type</span><br><span class="line"><span class="comment">// bad </span></span><br><span class="line"><span class="keyword">if</span> (urlType === <span class="string">'wechat'</span>) &#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good </span></span><br><span class="line">config.t</span><br><span class="line"><span class="keyword">const</span> urlTypeConfig: Record&lt;string, typeItem&gt; = [</span><br><span class="line">  <span class="string">'wechat'</span>: &#123; <span class="comment">// key 就是对应的type</span></span><br><span class="line">    name: <span class="string">'wechat'</span>, </span><br><span class="line">    show: [<span class="string">'header'</span>, <span class="string">'footer'</span>, <span class="string">'wechat'</span>] <span class="comment">// 展示什么，可能是异步的</span></span><br><span class="line">    pession: [<span class="string">'admin'</span>], <span class="comment">// 权限是什么，可能是异步的</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'zhifubao'</span>: &#123; <span class="comment">// key 就是对应的type</span></span><br><span class="line">    name: <span class="string">'zhifubao'</span>, </span><br><span class="line">    show: [<span class="string">'header'</span>, <span class="string">'footer'</span>, <span class="string">'zhifubao'</span>] <span class="comment">// 展示什么，可能是异步的</span></span><br><span class="line">    pession: [<span class="string">'admin'</span>], <span class="comment">// 权限是什么，可能是异步的</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务逻辑</span></span><br><span class="line"><span class="keyword">const</span> qsObj = qs(<span class="built_in">window</span>.location.url)</span><br><span class="line"><span class="keyword">const</span> urlType = qsObj.type</span><br><span class="line">urlTypeConfig.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(urlType === item.type) &#123;</span><br><span class="line">    doSomeThing(item.show)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="不要使用renderXXX-要使用函数式组件"><a href="#不要使用renderXXX-要使用函数式组件" class="headerlink" title="不要使用renderXXX,要使用函数式组件"></a>不要使用renderXXX,要使用函数式组件</h2><p>发现团队一些小伙伴为了减少render函数里面的代码量，会把一些元素拆分到函数里面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">  renderHeader = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">  renderBody = () =&gt; &#123;</span><br><span class="line">    return (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">  renderFooter = () =&gt; &#123;</span><br><span class="line">    return (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        renderHeader()</span><br><span class="line">        renderBody()</span><br><span class="line">        renderFooter()</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>更好的办法，是用函数式组件取代在当前组件里面写方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">RenderHeader</span>(<span class="params">props</span>) =  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line"> function RenderBody(props) =  &#123;</span><br><span class="line">    return (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line"> function RenderFooter(props) =  &#123;</span><br><span class="line">    return (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">class Component extends React.Component&lt;iProps, iState&gt;&#123;  </span><br><span class="line">  render () &#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;RenderHeader /&gt;</span><br><span class="line">        &lt;RenderBody /&gt;</span><br><span class="line">        &lt;RenderFooter /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="a标签安全问题"><a href="#a标签安全问题" class="headerlink" title="a标签安全问题"></a>a标签安全问题</h2><p>使用a标签打开一个新窗口过程中的安全问题。新页面中可以使用window.opener来控制原始页面。如果新老页面同域，那么在新页面中可以任意操作原始页面。如果是不同域，新页面中依然可以通过window.opener.location，访问到原始页面的location对象<br>在带有target=”_blank”的a标签中，加上rel=”noopener”属性。如果使用window.open的方式打开页面，将opener对象置为空。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newWindow = <span class="built_in">window</span>.open();</span><br><span class="line">newWindow.opener = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<h2 id="void-0-替代undefined"><a href="#void-0-替代undefined" class="headerlink" title="void 0 替代undefined"></a>void 0 替代undefined</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clearSessioin = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	</span><br><span class="line">  req.session.userName = <span class="literal">undefined</span>;</span><br><span class="line">  </span><br><span class="line">  req.session.userName = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前端不要操作cookie"><a href="#前端不要操作cookie" class="headerlink" title="前端不要操作cookie"></a>前端不要操作cookie</h2><p>在做一些前后端鉴权的时候，后端应该开启domain,secure,httponly严格模式，禁止前端操作cookie，防止csrf攻击。</p>
<blockquote>
<p>转载自：<a href="https://juejin.im/post/5ce24f8ae51d45106477bd45" target="_blank" rel="noopener">https://juejin.im/post/5ce24f8ae51d45106477bd45</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;h3 id=&quot;文件顶部的注释，包括描述、作者、日期&quot;&gt;&lt;a href=&quot;#文件顶部的注释，包括描述、作者、日期&quot; class=&quot;headerlink&quot; title=&quot;文件顶部的注释，包括描述、作者、日期&quot;&gt;&lt;/a&gt;文件顶部的注释，包括描述、作者、日期&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @description xxxxxx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @author chengfeng&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @since 19/05/21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模块的注释&quot;&gt;&lt;a href=&quot;#模块的注释&quot; class=&quot;headerlink&quot; title=&quot;模块的注释&quot;&gt;&lt;/a&gt;模块的注释&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 拷贝数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param  &amp;#123;*&amp;#125;  data   要拷贝的源数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param  &amp;#123;boolean&amp;#125; [isDeep=false] 是否深拷贝，默认浅拷贝&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @return &amp;#123;*&amp;#125;         返回拷贝后的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;业务代码注释&quot;&gt;&lt;a href=&quot;#业务代码注释&quot; class=&quot;headerlink&quot; title=&quot;业务代码注释&quot;&gt;&lt;/a&gt;业务代码注释&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*业务代码注释*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;变量注释&quot;&gt;&lt;a href=&quot;#变量注释&quot; class=&quot;headerlink&quot; title=&quot;变量注释&quot;&gt;&lt;/a&gt;变量注释&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface IState &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 电话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  phone: number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  address: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="typescript" scheme="https://shizhonghai.github.io/blog-daily/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 的常用语法</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/05/06/markdown/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/05/06/markdown/</id>
    <published>2019-05-05T16:00:00.000Z</published>
    <updated>2019-05-06T09:35:44.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown 支持嵌入 <code>html</code> 标签。<br><b>注意：Markdown 使用 <code>#</code>、<code>+</code>、<code>*</code> 等符号来标记， 符号后面必须跟上至少1个空格才有效！</b></p>
<a id="more"></a>
<h1 id="Markdown的常用语法"><a href="#Markdown的常用语法" class="headerlink" title="Markdown的常用语法"></a>Markdown的常用语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 标题支持两种形式：</p>
<h3 id="用-标记"><a href="#用-标记" class="headerlink" title="用 # 标记"></a>用 <code>#</code> 标记</h3><p>在 <b>标题开头</b> 加上1~6个#，依次代表一级标题、二级标题….六级标题</p>
<p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">##### 四级标题</span><br><span class="line">###### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。<br><b>无序列表使用 <code>-</code> 、 <code>+</code> 和 <code>*</code> 作为列表标记：</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Red</span><br><span class="line">- Green</span><br><span class="line">- Blue</span><br><span class="line"></span><br><span class="line">* Red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br><span class="line"></span><br><span class="line">+ Red</span><br><span class="line">+ Green</span><br><span class="line">+ Blue</span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p><b>有序列表则使用数字加英文句点.来表示：</b></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Red</span><br><span class="line">2. Green</span><br><span class="line">3. Blue</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用以 <code>&gt;</code> 来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。<br>常见的引用写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一段引用    // 在 `&gt;` 后面有 1 个空格</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>这是一段引用，在 <code>&gt;</code> 后面有 1 个空格</p>
</blockquote>
<p><b>Next 主题内置引用标签，使用方式</b></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><div class="note default"><p>这是一段来自 Next 主题内置引用标签， <code>default</code> 样式主题的引用 </p>
</div>
<div class="note primary"><p>这是一段来自 Next 主题内置引用标签， <code>primary</code> 样式主题的引用 </p>
</div><br><div class="note success"><p>这是一段来自 Next 主题内置引用标签， <code>success</code> 样式主题的引用 </p>
</div>
<div class="note info"><p>这是一段来自 Next 主题内置引用标签， <code>info</code> 样式主题的引用 </p>
</div><br><div class="note warning"><p>这是一段来自 Next 主题内置引用标签， <code>warning</code> 样式主题的引用 </p>
</div>
<div class="note danger"><p>这是一段来自 Next 主题内置引用标签， <code>danger</code> 样式主题的引用 </p>
</div></p>
<hr>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>两个<code>*</code>或<code>-</code>代表加粗，一个<code>*</code>或<code>-</code>代表斜体，<code>~~</code>代表删除。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**加粗文本** 或者 __加粗文本__</span><br><span class="line"></span><br><span class="line">*斜体文本*  或者_斜体文本_</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><strong>加粗文本</strong> 或者 <strong>加粗文本</strong><br><em>斜体文本</em>  或者<em>斜体文本</em><br><del>删除文本</del></p>
<hr>
<h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">图片：![]()    ![图片文本(可忽略)](图片地址)</span><br><span class="line"></span><br><span class="line">链接：[]()     [链接文本](链接地址)</span><br></pre></td></tr></table></figure>
<p>链接又分为<code>行内式</code>、<code>参考式</code>和<code>自动链接</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这是行内式链接：[ConnorLin&apos;s Blog](http://connorlin.github.io)。</span><br><span class="line"></span><br><span class="line">这是参考式链接：[ConnorLin&apos;s Blog][url]，其中url为链接标记，可置于文中任意位置。</span><br><span class="line"></span><br><span class="line">[url]: http://connorlin.github.io/ &quot;ConnorLin&apos;s Blog&quot;</span><br><span class="line"></span><br><span class="line">链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</span><br><span class="line"></span><br><span class="line">这是自动链接：直接使用`&lt;&gt;`括起来&lt;http://connorlin.github.io&gt;</span><br><span class="line"></span><br><span class="line">这是图片：![][avatar]</span><br><span class="line"></span><br><span class="line">[avatar]: https://connorlin.github.io/images/avatar.jpg</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>这是行内式链接：<a href="http://connorlin.github.io" target="_blank" rel="noopener">ConnorLin’s Blog</a>。</p>
<p>这是参考式链接：<a href="http://connorlin.github.io/" title="ConnorLin&#39;s Blog" target="_blank" rel="noopener">ConnorLin’s Blog</a>，其中url为链接标记，可置于文中任意位置。</p>
<p>这是自动链接：直接使用<code>&lt;&gt;</code>括起来 <a href="http://connorlin.github.io" target="_blank" rel="noopener">http://connorlin.github.io</a></p>
<p>这是图片：<img src="https://connorlin.github.io/images/avatar.jpg" alt></p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码分为 <code>行内代码</code> 和 <code>代码块</code>。</p>
<p>行内代码用两个反单引号(前后各一个)表示，例如：<code>code</code>。<br>代码块用三个反单引号，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'....'</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格对齐格式</p>
<ul>
<li>居左：:—-</li>
<li>居中：:—-:或—–</li>
<li>居右：—-:</li>
</ul>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|标题|标题|标题|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|居左测试文本|居中测试文本|居右测试文本|</span><br><span class="line">|居左测试文本1|居中测试文本2|居右测试文本3|</span><br><span class="line">|居左测试文本11|居中测试文本22|居右测试文本33|</span><br><span class="line">|居左测试文本111|居中测试文本222|居右测试文本333|</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">标题</th>
<th style="text-align:center">标题</th>
<th style="text-align:right">标题</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">居左测试文本</td>
<td style="text-align:center">居中测试文本</td>
<td style="text-align:right">居右测试文本</td>
</tr>
<tr>
<td style="text-align:left">居左测试文本1</td>
<td style="text-align:center">居中测试文本2</td>
<td style="text-align:right">居右测试文本3</td>
</tr>
<tr>
<td style="text-align:left">居左测试文本11</td>
<td style="text-align:center">居中测试文本22</td>
<td style="text-align:right">居右测试文本33</td>
</tr>
<tr>
<td style="text-align:left">居左测试文本111</td>
<td style="text-align:center">居中测试文本222</td>
<td style="text-align:right">居右测试文本333</td>
</tr>
</tbody>
</table>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在一行中用三个以上的 <code>*</code>、 <code>-</code>、<code>_</code> 来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。<br>效果均为一条分割线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line"></span><br><span class="line">_____</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">* * * * *</span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<hr>
<blockquote>
<p>相关内容转载自：<a href="https://www.jianshu.com/p/82e730892d42" target="_blank" rel="noopener">https://www.jianshu.com/p/82e730892d42</a><br>  参考资料1：<a href="http://www.cnblogs.com/skyhuangdan/p/5485069.html" target="_blank" rel="noopener">http://www.cnblogs.com/skyhuangdan/p/5485069.html</a><br>  参考资料2：<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">https://www.appinn.com/markdown/</a><br>  主要是为了方便自己书写用，最起码有个留存。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown 支持嵌入 &lt;code&gt;html&lt;/code&gt; 标签。&lt;br&gt;&lt;b&gt;注意：Markdown 使用 &lt;code&gt;#&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt; 等符号来标记， 符号后面必须跟上至少1个空格才有效！&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://shizhonghai.github.io/blog-daily/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>About Hexo NexT.Pisces</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/05/06/hexo-next-des/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/05/06/hexo-next-des/</id>
    <published>2019-05-05T16:00:00.000Z</published>
    <updated>2019-05-06T09:26:20.625Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next 主题官网</a></p>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 博客官网</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://theme-next.iissnan.com/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next 主题官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io
    
    </summary>
    
    
      <category term="Hexo" scheme="https://shizhonghai.github.io/blog-daily/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 相同的正则多次调用 test() 返回的值却不同的问题</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/04/25/javascript-regexp-test-g/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/04/25/javascript-regexp-test-g/</id>
    <published>2019-04-24T16:00:00.000Z</published>
    <updated>2019-05-06T09:35:16.711Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^1[345678][0-9]&#123;9&#125;$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="number">15328044636</span>));     <span class="comment">//  =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="number">15328044636</span>));     <span class="comment">//  =&gt; false</span></span><br></pre></td></tr></table></figure></p>
<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>这是因为正则 <code>reg</code> 的 g 属性，设置的全局匹配。<code>RegExp</code> 有一个 <code>lastIndex</code> 属性，来保存索引开始位置。上面的问题，第一次调用的 <code>lastIndex</code> 值为0，到了第二次调用，值变成了11。如果正则匹配失败，<code>lastIndex</code> 会被重置为 0。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^1[345678][0-9]&#123;9&#125;$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex, reg.test(<span class="number">15328044636</span>));      <span class="comment">//  =&gt; 0 true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex, reg.test(<span class="number">15328044636</span>));      <span class="comment">//  =&gt; 11 false</span></span><br></pre></td></tr></table></figure>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>第一种方案是将 <code>g</code> 去掉，关闭全局匹配。<br>第二种就是在每次匹配之前将 <code>lastIndex</code> 的值设置为0。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^1[345678][0-9]&#123;9&#125;$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex, reg.test(<span class="number">15328044636</span>));      <span class="comment">//  =&gt; 0 true</span></span><br><span class="line">reg.lastIndex = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex, reg.test(<span class="number">15328044636</span>));      <span class="comment">//  =&gt; 0 true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>本文转载自：<a href="https://www.jianshu.com/p/a9840a5bc6cc" target="_blank" rel="noopener">https://www.jianshu.com/p/a9840a5bc6cc</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reg = &lt;span class=&quot;regexp&quot;&gt;/^1[345678][0-9]&amp;#123;9&amp;#125;$/g&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(reg.test(&lt;span class=&quot;number&quot;&gt;15328044636&lt;/span&gt;));     &lt;span class=&quot;comment&quot;&gt;//  =&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(reg.test(&lt;span class=&quot;number&quot;&gt;15328044636&lt;/span&gt;));     &lt;span class=&quot;comment&quot;&gt;//  =&amp;gt; false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题原因&quot;&gt;&lt;a href=&quot;#问题原因&quot; class=&quot;headerlink&quot; title=&quot;问题原因&quot;&gt;&lt;/a&gt;问题原因&lt;/h3&gt;&lt;p&gt;这是因为正则 &lt;code&gt;reg&lt;/code&gt; 的 g 属性，设置的全局匹配。&lt;code&gt;RegExp&lt;/code&gt; 有一个 &lt;code&gt;lastIndex&lt;/code&gt; 属性，来保存索引开始位置。上面的问题，第一次调用的 &lt;code&gt;lastIndex&lt;/code&gt; 值为0，到了第二次调用，值变成了11。如果正则匹配失败，&lt;code&gt;lastIndex&lt;/code&gt; 会被重置为 0。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="https://shizhonghai.github.io/blog-daily/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 正则表达式</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/04/25/javascript-regexp/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/04/25/javascript-regexp/</id>
    <published>2019-04-24T16:00:00.000Z</published>
    <updated>2019-05-08T03:25:06.270Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>在 <code>JavaScript</code> 中，正则表达式(Regular Expressions)也是对象。这些模式被用于 <code>RegExp</code> 的 <code>exec</code> 和 <code>test</code> 方法, 以及 <code>String</code> 的 <code>match</code>、<code>replace</code>、<code>search</code> 和 <code>split</code> 方法。</p>
</div>
<h2 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式"></a>创建一个正则表达式</h2><p>你可以使用以下两种方法之一构建一个正则表达式：<br>使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/ab+c/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/ab+c/gi</span>;</span><br></pre></td></tr></table></figure>
<p>或者调用 <code>RegExp</code> 对象的构造函数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"ab+c"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^[a-zA-Z]+[0-9]*\W?_$/</span>, <span class="string">"gi"</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="正则表达式字符匹配攻略"><a href="#正则表达式字符匹配攻略" class="headerlink" title="正则表达式字符匹配攻略"></a>正则表达式字符匹配攻略</h2><blockquote>
<p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p>
</blockquote>
<h3 id="两种模糊匹配"><a href="#两种模糊匹配" class="headerlink" title="两种模糊匹配"></a>两种模糊匹配</h3><p>如果正则只有精确匹配是没多大意义的，比如 <code>/hello/</code> ，也只能匹配字符串中的 <code>&quot;hello&quot;</code> 这个子串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/hello/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"hello"</span>) );         <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"hel333lo"</span>) );      <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure>
<p>正则表达式之所以强大，是因为其能实现模糊匹配。<br>而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。</p>
<h4 id="横向模糊匹配"><a href="#横向模糊匹配" class="headerlink" title="横向模糊匹配"></a>横向模糊匹配</h4><blockquote>
<p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。其实现的方式是使用量词。譬如 <code>{m,n}</code> ，表示连续出现最少 <code>m</code> 次，最多 <code>n</code> 次。比如 <code>/ab{2,5}c/</code> 表示匹配这样一个字符串：第一个字符是 <code>“a”</code> ，接下来是2到5个字符 <code>“b”</code> ，最后是字符 <code>“c”</code> 。</p>
</blockquote>
<p>测试如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/ab&#123;2,5&#125;c/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );     </span><br><span class="line"><span class="comment">// =&gt; ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span></span><br></pre></td></tr></table></figure></p>
<p>Tips: 案例中用的正则是 <code>/ab{2,5}c/g</code> ，后面多了 <code>g</code> ，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”。<code>g</code> 是单词 <code>global</code> 的首字母。</p>
<h4 id="纵向模糊匹配"><a href="#纵向模糊匹配" class="headerlink" title="纵向模糊匹配"></a>纵向模糊匹配</h4><blockquote>
<p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。其实现的方式是使用字符组。譬如 <code>[abc]</code> ，表示该字符可以是字符 “a”、“b”、“c” 中的任何一个。比如 <code>/a[123]b/</code> 可以匹配如下三种字符串：”a1b”、”a2b”、”a3b”。</p>
</blockquote>
<p>测试如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a[123]b/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"a0b a1b a2b a3b a4b"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); </span><br><span class="line"><span class="comment">// =&gt; ["a1b", "a2b", "a3b"]</span></span><br></pre></td></tr></table></figure></p>
<p>要掌握横向和纵向模糊匹配，基本能解决很大部分正则匹配问题。</p>
<h3 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h3><p>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如 <code>[abc]</code> ，表示匹配一个字符，它可以是 “a”、“b”、“c” 之一。</p>
<h4 id="范围表示法"><a href="#范围表示法" class="headerlink" title="范围表示法"></a>范围表示法</h4><p>如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。例如 <code>[123456abcdefGHIJKLM]</code> ，可以写成 <code>[1-6a-fG-M]</code> 。用连字符 <code>-</code> 来省略和简写。因为连字符有特殊用途，如果要匹配 “a”、“-”、“z” 这三者中任意一个字符，该怎么做呢？不能写成 <code>[a-z]</code> ，因为其表示小写字符中的任何一个字符。可以写成如下的方式：<code>[-az]</code> 或 <code>[az-]</code> 或 <code>[a\-z]</code> 。即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。</p>
<p>测试如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/[1-6a-fG-M]/</span>);</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">'123456abcdefGHIJKLM'</span>) ); </span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></p>
<h4 id="排除字符组"><a href="#排除字符组" class="headerlink" title="排除字符组"></a>排除字符组</h4><p>纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是 “a”、”b”、”c” 。此时就是排除字符组（反义字符组）的概念。例如 <code>[^abc]</code> ，表示是一个除 “a”、”b”、”c” 之外的任意一个字符。字符组的第一位放 <code>^</code>（脱字符），表示求反的概念。</p>
<p>测试如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/[^abc]/</span>);</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">'abc'</span>) );   <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">'222'</span>) );   <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></p>
<h4 id="常见的简写形式"><a href="#常见的简写形式" class="headerlink" title="常见的简写形式"></a>常见的简写形式</h4><p>有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。</p>
<blockquote>
<p><code>\d</code> 就是 <code>[0-9]</code> 。表示是一位数字。记忆方式：其英文是digit（数字）。<br><code>\D</code> 就是 <code>[^0-9]</code> 。表示除数字外的任意字符。<br><code>\w</code> 就是 <code>[0-9a-zA-Z_]</code> 。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。<br><code>\W</code> 是 <code>[^0-9a-zA-Z_]</code> 。非单词字符。<br><code>\s</code> 是 <code>[ \t\v\n\r\f]</code> 。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式： <code>s</code> 是 space character 的首字母。<br><code>\S</code> 是 <code>[^ \t\v\n\r\f]</code> 。 非空白符。.就是 <code>[^\n\r\u2028\u2029]</code> 。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p>
</blockquote>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>量词也称重复。掌握 <code>{m,n}</code> 的准确含义后，只需要记住一些简写形式。</p>
<h4 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h4><blockquote>
<p><code>{m,}</code> 表示至少出现 <code>m</code> 次。<br><code>{m}</code> 等价于 <code>{m,m}</code> ，表示出现 <code>m</code> 次。<br><code>?</code> 等价于 <code>{0,1}</code> ，表示出现或者不出现。记忆方式：问号的意思表示，有吗？<br><code>+</code> 等价于 <code>{1,}</code> ，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。<br><code>*</code> 等价于 <code>{0,}</code> ，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</p>
</blockquote>
<p>测试如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  &#123;m,&#125; 表示至少出现m次。</span></span><br><span class="line"><span class="keyword">var</span> regex1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/ac&#123;2,&#125;r/</span>);</span><br><span class="line">regex1.test(<span class="string">'accr'</span>);                <span class="comment">//  =&gt; true</span></span><br><span class="line">regex1.test(<span class="string">'acr'</span>);                 <span class="comment">//  =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  &#123;m&#125; 等价于 &#123;m,m&#125;，表示出现 m 次</span></span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/ac&#123;3&#125;r/</span>);</span><br><span class="line">regex2.test(<span class="string">'acccr'</span>);               <span class="comment">//  =&gt; true</span></span><br><span class="line">regex2.test(<span class="string">'accr'</span>);                <span class="comment">//  =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ? 等价于&#123;0,1&#125;，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</span></span><br><span class="line"><span class="keyword">var</span> regex3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc?r/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(regex3.test(<span class="string">'abcr'</span>));    <span class="comment">//  =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex3.test(<span class="string">'abbr'</span>));    <span class="comment">//  =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(regex3.test(<span class="string">'abr'</span>));     <span class="comment">//  =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// + 等价于&#123;1,&#125;，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</span></span><br><span class="line"><span class="keyword">var</span> regex4 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/ac+r/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(regex4.test(<span class="string">'acr'</span>));    <span class="comment">//  =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex4.test(<span class="string">'accr'</span>));   <span class="comment">//  =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex4.test(<span class="string">'abr'</span>));    <span class="comment">//  =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * 等价于&#123;0,&#125;，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</span></span><br><span class="line"><span class="keyword">var</span> regex5 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc*r/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(regex5.test(<span class="string">'abcr'</span>));    <span class="comment">//  =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex5.test(<span class="string">'abccr'</span>));   <span class="comment">//  =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex5.test(<span class="string">'abr'</span>));     <span class="comment">//  =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex5.test(<span class="string">'ar'</span>));      <span class="comment">//  =&gt; false</span></span><br></pre></td></tr></table></figure></p>
<h4 id="贪婪匹配和惰性匹配"><a href="#贪婪匹配和惰性匹配" class="headerlink" title="贪婪匹配和惰性匹配"></a>贪婪匹配和惰性匹配</h4><p>例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"123 1234 12345 123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); </span><br><span class="line"><span class="comment">// =&gt; ["123", "1234", "12345", "12345"]</span></span><br></pre></td></tr></table></figure></p>
<p>其中正则 <code>/\d{2,5}/</code> ，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。但是其是贪婪的，它会尽可能多的匹配。你能给我6个，我就要6个。你能给我3个，我就要3个。反正只要在能力范围内，越多越好。<br>而惰性匹配，就是尽可能少的匹配：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;?/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"123 1234 12345 123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); </span><br><span class="line"><span class="comment">// =&gt; ["12", "12", "34", "12", "34", "12", "34", "56"]</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>/\d{2,5}?/</code> 表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。<br>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p>
<blockquote>
<p><code>{m,n}?</code><br>  <code>{m,}?</code><br>  <code>??</code><br>  <code>+?</code><br>  <code>*?</code></p>
</blockquote>
<p>对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？</p>
<h3 id="多选分支"><a href="#多选分支" class="headerlink" title="多选分支"></a>多选分支</h3><p>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。具体形式如下：<code>(p1|p2|p3)</code> ，其中 p1、p2 和 p3 是子模式，用 <code>|</code>（管道符）分隔，表示其中任何之一。例如要匹配 “good” 和 “nice” 可以使用 <code>/good|nice/</code> 。<br>测试如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/good|nice/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"good idea, nice try."</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );         <span class="comment">// =&gt; ["good", "nice"]</span></span><br></pre></td></tr></table></figure>
<p>但有个事实我们应该注意，比如我用 <code>/good|goodbye/</code> ，去匹配 “goodbye” 字符串时，结果是 “good”</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/good|goodbye/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"goodbye"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );         <span class="comment">// =&gt; ["good"]</span></span><br></pre></td></tr></table></figure>
<p>而把正则改成 <code>/goodbye|good/</code> ，结果是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/goodbye|good/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"goodbye"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );         <span class="comment">// =&gt; ["goodbye"]</span></span><br></pre></td></tr></table></figure>
<p>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。</p>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>匹配字符，无非就是字符组、量词和分支结构的组合使用。<br>下面找几个例子演练一下（其中，每个正则并不是只有唯一写法，可以有多种，就不一一列举了）：</p>
<h4 id="匹配16进制颜色值"><a href="#匹配16进制颜色值" class="headerlink" title="匹配16进制颜色值"></a>匹配16进制颜色值</h4><blockquote>
<p>要求匹配：<code>#ffbbad</code>、<code>#Fc01DF</code>、<code>#FFF</code>、<code>#ffE</code></p>
</blockquote>
<p>分析：<br>表示一个16进制字符，可以用字符组 <code>[0-9a-fA-F]</code> 。<br>其中字符可以出现3或6次，需要是用量词和分支结构。<br>使用分支结构时，需要注意顺序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"#ffbbad #Fc01DF #FFF #ffE"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); </span><br><span class="line"><span class="comment">// =&gt; ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span></span><br></pre></td></tr></table></figure>
<h4 id="匹配时间"><a href="#匹配时间" class="headerlink" title="匹配时间"></a>匹配时间</h4><blockquote>
<p>要求匹配：<code>23:59</code>、<code>02:07</code></p>
</blockquote>
<p>分析：<br>共4位数字，第一位数字可以为 <code>[0-2]</code> 。<br>当第1位为2时，第2位可以为 <code>[0-3]</code> ，其他情况时，第2位为 <code>[0-9]</code> 。<br>第3位数字为 <code>[0-5]</code> ，第4位为 <code>[0-9]</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^([01][0-9]|[2][0-3]):[0-5][0-9]$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"23:59"</span>) );         <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"02:07"</span>) );         <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p>如果也要求匹配7:9，也就是说时分前面的0可以省略。<br>此时正则变成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"23:59"</span>) ); </span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"02:07"</span>) ); </span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"7:9"</span>) ); </span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<h4 id="匹配日期"><a href="#匹配日期" class="headerlink" title="匹配日期"></a>匹配日期</h4><blockquote>
<p>比如 <code>yyyy-mm-dd</code> 格式为例。要求匹配：2017-06-10</p>
</blockquote>
<p>分析：<br>年，四位数字即可，可用 <code>[0-9]{4}</code> 。<br>月，共12个月，分两种情况01、02、……、09和10、11、12，可用 <code>(0[1-9]|1[0-2])</code> 。<br>日，最大31天，可用 <code>(0[1-9]|[12][0-9]|3[01])</code> 。<br>正则如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"2017-06-10"</span>) ); </span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p>Tips： <code>/^[0-9]</code> 这个 <code>^</code> 表示：匹配以数字开始的字符串(从左向右匹配)。<br><code>$/</code> 这个 <code>$</code> 表示：匹配以数字结尾的字符串(从后向前匹配)。<br>如果 <code>^</code> 在 <code>[]</code> 中出现，那么就是非的意思了，不再是从开头匹配的意思。</p>
<h2 id="正则表达式位置匹配攻略"><a href="#正则表达式位置匹配攻略" class="headerlink" title="正则表达式位置匹配攻略"></a>正则表达式位置匹配攻略</h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p>
<h3 id="什么是位置呢？"><a href="#什么是位置呢？" class="headerlink" title="什么是位置呢？"></a>什么是位置呢？</h3><p>位置是相邻字符之间的位置。比如，下图中箭头所指的地方：<br><img src="https://user-gold-cdn.xitu.io/2017/7/19/95d0faf6b21f9414d24c8281b3046746?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<h3 id="如何匹配位置呢？"><a href="#如何匹配位置呢？" class="headerlink" title="如何匹配位置呢？"></a>如何匹配位置呢？</h3><p>在ES5中，共有6个锚字符：</p>
<blockquote>
<p><code>^</code> <code>$</code> <code>\b</code> <code>\B</code> <code>(?=p)</code> <code>(?!p)</code></p>
</blockquote>
<h4 id="和"><a href="#和" class="headerlink" title="^和$"></a>^和$</h4><p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。<br><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p>
<p>比如我们把字符串的开头和结尾用”#”替换（位置可以替换成字符的！）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/^|$/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);            <span class="comment">// =&gt; "#hello#"</span></span><br></pre></td></tr></table></figure>
<p>多行匹配模式时，二者是行的概念，这个需要我们的注意：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"I\nlove\njavascript"</span>.replace(<span class="regexp">/^|$/gm</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#I#</span></span><br><span class="line"><span class="comment">#love#</span></span><br><span class="line"><span class="comment">#javascript#</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Tips：<code>JavaScript</code> 正则标志 <code>/g</code> , <code>/i</code> , <code>/m</code> 说明</p>
<blockquote>
<p>1、<code>/g</code> 表示该表达式将用来在输入字符串中查找所有可能的匹配，返回的结果可以是多个。如果不加 <code>/g</code> 最多只会匹配一个<br>  2、<code>/i</code> 表示匹配的时候不区分大小写<br>  3、<code>/m</code> 表示多行匹配，什么是多行匹配呢？就是匹配换行符两端的潜在匹配。影响正则中的<code>^$</code> 符号。</p>
</blockquote>
<h4 id="b-和-B"><a href="#b-和-B" class="headerlink" title="\b 和 \B"></a>\b 和 \B</h4><p><code>\b</code> 是单词边界，具体就是 <code>\w</code> 和 <code>\W</code> 之间的位置，也包括 <code>\w</code> 和 <code>^</code> 之间的位置，也包括 <code>\w</code> 和 <code>$</code> 之间的位置。<br>比如一个文件名是”[JS] Lesson_01.mp4”中的 <code>\b</code>，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"[JS] Lesson_01.mp4"</span>.replace(<span class="regexp">/\b/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);        <span class="comment">// =&gt; "[#JS#] #Lesson_01#.#mp4#"</span></span><br></pre></td></tr></table></figure>
<p>为什么匹配结果是这样呢？分析如下：<br>首先，我们知道，<code>\w</code> 是字符组 <code>[0-9a-zA-Z_]</code> 的简写形式(单词字符)，即 <code>\w</code> 是字母数字或者下划线的中任何一个字符。而 <code>\W</code> 是排除字符组 <code>[^0-9a-zA-Z_]</code> 的简写形式(非单词字符)，即 <code>\W</code> 是 <code>\w</code> 以外的任何一个字符。<br>此时我们可以看看”[#JS#] #Lesson_01#.#mp4#”中的每一个”#”，是怎么来的。</p>
<blockquote>
<p>第一个”#”，两边是”[“与”J”，是 <code>\W</code> 和 <code>\w</code> 之间的位置。<br>  第二个”#”，两边是”S”与”]”，也就是 <code>\w</code> 和 <code>\W</code> 之间的位置。<br>  第三个”#”，两边是空格与”L”，也就是 <code>\W</code> 和 <code>\w</code> 之间的位置。<br>  第四个”#”，两边是”1”与”.”，也就是 <code>\w</code> 和 <code>\W</code> 之间的位置。<br>  第五个”#”，两边是”.”与”m”，也就是 <code>\W</code> 和 <code>\w</code> 之间的位置。<br>  第六个”#”，其对应的位置是结尾，但其前面的字符”4”是 <code>\w</code> ，即 <code>\w</code> 和 <code>$</code> 之间的位置。</p>
</blockquote>
<p>知道了 <code>\b</code> 的概念后，那么 <code>\B</code> 也就相对好理解了。<br><code>\B</code> 就是 <code>\b</code> 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 <code>\b</code> ，剩下的都是 <code>\B</code> 的。<br>具体说来就是 <code>\w</code> 与 <code>\w</code> 、 <code>\W</code> 与 <code>\W</code> 、<code>^</code> 与 <code>\W</code> ，<code>\W</code> 与 <code>$</code> 之间的位置。<br>比如上面的例子，把所有 <code>\B</code> 替换成 “#”：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"[JS] Lesson_01.mp4"</span>.replace(<span class="regexp">/\B/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);        <span class="comment">// =&gt; "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"</span></span><br></pre></td></tr></table></figure>
<h4 id="p-和-p"><a href="#p-和-p" class="headerlink" title="(?=p) 和 (?!p)"></a>(?=p) 和 (?!p)</h4><p>(?=p)，其中p是一个子模式，即p前面的位置。<br>比如(?=l)，表示’l’字符前面的位置，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?=l)/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);        <span class="comment">// =&gt; "he#l#lo"</span></span><br></pre></td></tr></table></figure>
<p>而(?!p)就是(?=p)的反面意思，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?!l)/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);        <span class="comment">// =&gt; "#h#ell#o#"</span></span><br></pre></td></tr></table></figure>
<p>二者的学名分别是 positive lookahead 和 negative lookahead。<br>中文翻译分别是正向先行断言和负向先行断言。<br>ES6中，还支持 positive lookbehind 和 negative lookbehind。<br>具体是(?&lt;=p)和(?&lt;!p)。<br>比如(?=p)，一般都理解成：要求接下来的字符与p匹配，但不能包括p的那些字符。<br>而在个人看来(?=p)就与^一样好理解，就是p前面的那个位置。</p>
<blockquote>
<p><code>x(?=y)</code> 仅匹配被y跟随的x。 例如，<code>/Jack(?=Sprat)/</code> 只有在 ‘Jack’ 后面紧跟着 ‘Sprat’ 时，才会匹配它。<code>/Jack(?=Sprat|Frost)/</code> 只有在 ‘Jack’ 后面紧跟着 ‘Sprat’ 或 ‘Frost’ 时，才会匹配它。然而，’Sprat’ 或 ‘Frost’ 都不是匹配结果的一部分。<br>  <code>x(?!y)</code> 仅匹配不被y跟随的x。举个例子，<code>/\d+(?!\.)/</code> 只会匹配不被点（.）跟随的数字。<code>/\d+(?!\.)/.exec(&#39;3.141&#39;)</code> 匹配”141”，而不是”3.141”<br>相关断言（Assertions）学习资料可以看看这里：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#assertions" target="_blank" rel="noopener">MDN</a>、<a href="https://www.cnblogs.com/whaozl/p/5462865.html" target="_blank" rel="noopener">博客</a>、<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F?fr=aladdin#7" target="_blank" rel="noopener">百科</a></p>
</blockquote>
<h3 id="位置的特性"><a href="#位置的特性" class="headerlink" title="位置的特性"></a>位置的特性</h3><p>对于位置的理解，我们可以理解成空字符 “”。<br>比如”hello”字符串等价于如下的形式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hello"</span> === <span class="string">""</span> + <span class="string">"h"</span> + <span class="string">""</span> + <span class="string">"e"</span> + <span class="string">""</span> + <span class="string">"l"</span> + <span class="string">""</span> + <span class="string">"l"</span> + <span class="string">"o"</span> + <span class="string">""</span>;   <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p>也等价于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hello"</span> == <span class="string">""</span> + <span class="string">""</span> + <span class="string">"hello"</span>        <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p>因此，把 <code>/^hello$/</code> 写成 <code>/^^hello$$$/</code> ，是没有任何问题的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="regexp">/^^hello$$$/</span>.test(<span class="string">"hello"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);                <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p>甚至可以写成更复杂的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="regexp">/(?=he)^^he(?=\w)llo$\b\b$/</span>.test(<span class="string">"hello"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);                <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p>也就是说字符之间的位置，可以写成多个。<br>把位置理解空字符，是对位置非常有效的理解方式。</p>
<h3 id="相关案例"><a href="#相关案例" class="headerlink" title="相关案例"></a>相关案例</h3><h4 id="不匹配任何东西的正则"><a href="#不匹配任何东西的正则" class="headerlink" title="不匹配任何东西的正则"></a>不匹配任何东西的正则</h4><p>让你写个正则不匹配任何东西<br><code>/.^/</code><br>因为此正则要求只有一个字符，但该字符后面是开头。</p>
<h4 id="数字的千位分隔符表示法"><a href="#数字的千位分隔符表示法" class="headerlink" title="数字的千位分隔符表示法"></a>数字的千位分隔符表示法</h4><p>比如把”12345678”，变成”12,345,678”。<br>可见是需要把相应的位置替换成”,”。<br>思路是什么呢？</p>
<h5 id="弄出最后一个逗号"><a href="#弄出最后一个逗号" class="headerlink" title="弄出最后一个逗号"></a>弄出最后一个逗号</h5><p>使用 <code>(?=\d{3}$)</code> 就可以做到：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在字符最后3个数字前面加一个逗号</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"12345678"</span>.replace(<span class="regexp">/(?=\d&#123;3&#125;$)/g</span>, <span class="string">','</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);            <span class="comment">// =&gt; "12345,678"</span></span><br></pre></td></tr></table></figure>
<h5 id="弄出所有的逗号"><a href="#弄出所有的逗号" class="headerlink" title="弄出所有的逗号"></a>弄出所有的逗号</h5><p>因为逗号出现的位置，要求后面3个数字一组，也就是 <code>\d{3}</code> 至少出现一次。<br>此时可以使用量词+：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"12345678"</span>.replace(<span class="regexp">/(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">','</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);            <span class="comment">// =&gt; "12,345,678"</span></span><br></pre></td></tr></table></figure>
<h5 id="匹配其余案例"><a href="#匹配其余案例" class="headerlink" title="匹配其余案例"></a>匹配其余案例</h5><p>写完正则后，多验证几个案例，此时我们会发现问题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"123456789"</span>.replace(<span class="regexp">/(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">','</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);            <span class="comment">// =&gt; ",123,456,789"</span></span><br></pre></td></tr></table></figure>
<p>因为上面的正则，仅仅表示把从结尾向前数，一但是3的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。<br>怎么解决呢？我们要求匹配到这个位置不能是开头。<br>我们知道匹配开头可以使用 <code>^</code> ，但要求这个位置不是开头怎么办？<br><code>(?!^)</code> 测试如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string1 = <span class="string">"12345678"</span>, string2 = <span class="string">"123456789"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = string1.replace(reg, <span class="string">','</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);            <span class="comment">// =&gt; "12,345,678"</span></span><br><span class="line"></span><br><span class="line">result = string2.replace(reg, <span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);            <span class="comment">// =&gt; "123,456,789"</span></span><br></pre></td></tr></table></figure>
<p>123456.3435 如果要匹配这种数据格式呢？就是保留小数并且千分位逗号分割</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小数点前面的数字，每隔三个数加一个 ','</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">'123456.3435'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d)(?=(\d&#123;3&#125;)+\.)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = string.replace(reg, <span class="string">'$1,'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);            <span class="comment">// =&gt; "123,456.3435"</span></span><br></pre></td></tr></table></figure>
<p>Tips: <code>var a = 222122122.6754;var b = a.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, &#39;$1,&#39;);</code>  这行代码，可以实现四舍五入保留2位小数点，并且千分位逗号分割，这是项目中很常见的一个需求</p>
<h2 id="test-exec-match-replace-用法介绍"><a href="#test-exec-match-replace-用法介绍" class="headerlink" title="test, exec, match, replace 用法介绍"></a>test, exec, match, replace 用法介绍</h2><p>注：<code>pattern</code> 为 <code>RegExp</code> 的实例, <code>str</code> 为 <code>String</code> 的实例</p>
<table>
<thead>
<tr>
<th style="text-align:left">用法</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>pattern.test(str)</code></td>
<td style="text-align:left">判断 <code>str</code> 是否包含匹配结果</td>
<td style="text-align:left">包含返回 <code>true</code> ，不包含返回 <code>false</code></td>
</tr>
<tr>
<td style="text-align:left"><code>pattern.exec(str)</code></td>
<td style="text-align:left">根据 <code>pattern</code> 对 <code>str</code> 进行正则匹配</td>
<td style="text-align:left">返回匹配结果数组，如匹配不到返回 <code>null</code></td>
</tr>
<tr>
<td style="text-align:left"><code>str.match(pattern)</code></td>
<td style="text-align:left">根据 <code>pattern</code> 对 <code>str</code> 进行正则匹配</td>
<td style="text-align:left">返回匹配结果数组，如匹配不到返回 <code>null</code></td>
</tr>
<tr>
<td style="text-align:left"><code>str.replace(pattern, replacement)</code></td>
<td style="text-align:left">根据 <code>pattern</code> 进行正则匹配,把匹配结果替换为 <code>replacement</code></td>
<td style="text-align:left">返回一个新的字符串</td>
</tr>
<tr>
<td style="text-align:left"><code>str.search(pattern)</code></td>
<td style="text-align:left">根据 <code>pattern</code> 对 <code>str</code> 进行正则匹配</td>
<td style="text-align:left">返回匹配到的位置索引，如匹配不到返回 <code>-1</code></td>
</tr>
<tr>
<td style="text-align:left"><code>str.split(pattern)</code></td>
<td style="text-align:left"><code>pattern</code> 可以是一个字符串或正则表达式，使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 <code>String</code> 方法</td>
<td style="text-align:left">返回源字符串以分隔符出现位置分隔而成的一个 <code>Array</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Tips：当字符串为空时，<code>split()</code> 返回一个包含一个空字符串的数组，而不是一个空数组，如果字符串和分隔符都是空字符串，则返回一个空数组。<br>        如果空字符串 <code>(&#39;&#39;)</code> 被用作分隔符，则字符串会在每个字符之间分割。<br>        <b><a href="https://segmentfault.com/a/1190000003497780" target="_blank" rel="noopener">正则用法更多详情</a></b></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;在 &lt;code&gt;JavaScript&lt;/code&gt; 中，正则表达式(Regular Expressions)也是对象。这些模式被用于 &lt;code&gt;RegExp&lt;/code&gt; 的 &lt;code&gt;exec&lt;/code&gt; 和 &lt;code&gt;test&lt;/code&gt; 方法, 以及 &lt;code&gt;String&lt;/code&gt; 的 &lt;code&gt;match&lt;/code&gt;、&lt;code&gt;replace&lt;/code&gt;、&lt;code&gt;search&lt;/code&gt; 和 &lt;code&gt;split&lt;/code&gt; 方法。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;创建一个正则表达式&quot;&gt;&lt;a href=&quot;#创建一个正则表达式&quot; class=&quot;headerlink&quot; title=&quot;创建一个正则表达式&quot;&gt;&lt;/a&gt;创建一个正则表达式&lt;/h2&gt;&lt;p&gt;你可以使用以下两种方法之一构建一个正则表达式：&lt;br&gt;使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;regexp&quot;&gt;/ab+c/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regex = &lt;span class=&quot;regexp&quot;&gt;/ab+c/gi&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者调用 &lt;code&gt;RegExp&lt;/code&gt; 对象的构造函数，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;ab+c&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/^[a-zA-Z]+[0-9]*\W?_$/&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;gi&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="RegExp" scheme="https://shizhonghai.github.io/blog-daily/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>灵活运用 JavaScript 开发技巧</title>
    <link href="https://shizhonghai.github.io/blog-daily/2019/03/01/javascript-skill/"/>
    <id>https://shizhonghai.github.io/blog-daily/2019/03/01/javascript-skill/</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2019-05-07T09:31:19.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array-Skill"><a href="#Array-Skill" class="headerlink" title="Array Skill"></a>Array Skill</h2><blockquote>
<p>统计元素个数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> count = arr.reduce(<span class="function">(<span class="params">t, c</span>) =&gt;</span> &#123;</span><br><span class="line">    t[c] = t[c] ? ++ t[c] : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// count =&gt; &#123; 0: 1, 1: 2, 2: 3 &#125;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>快速创建数据列表</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>).fill(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">// data =&gt; [&#123;id:1&#125;,&#123;id:1&#125;,&#123;id:1&#125;,&#123;id:1&#125;,&#123;id:1&#125;]</span></span><br></pre></td></tr></table></figure>
<p>Tips: <code>fill()</code> 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p>
<blockquote>
<p>创建指定长度数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [...new <span class="built_in">Array</span>(<span class="number">5</span>).keys()];</span><br><span class="line"><span class="comment">// arr =&gt; [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建指定长度且值相等的数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [...new <span class="built_in">Array</span>(<span class="number">3</span>).keys()].fill(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// arr =&gt; [0, 0, 0]</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Object-Skill"><a href="#Object-Skill" class="headerlink" title="Object Skill"></a>Object Skill</h2><blockquote>
<p>删除无用属性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">0</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;; <span class="comment">// 只想拿b和c</span></span><br><span class="line"><span class="keyword">const</span> &#123; a, ...rest &#125; = obj;</span><br><span class="line"><span class="comment">// rest =&gt; &#123; b: 1, c: 2 &#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="DOM-Skill"><a href="#DOM-Skill" class="headerlink" title="DOM Skill"></a>DOM Skill</h2><blockquote>
<p>显示全部 <code>DOM</code> 边框：<code>调试页面元素边界时使用</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[].forEach.call($$(<span class="string">"*"</span>), dom =&gt; &#123;</span><br><span class="line">	dom.style.outline = <span class="string">"1px solid #"</span> + (~~(<span class="built_in">Math</span>.random() * (<span class="number">1</span> &lt;&lt; <span class="number">24</span>))).toString(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Number-Skill"><a href="#Number-Skill" class="headerlink" title="Number Skill"></a>Number Skill</h2><blockquote>
<p>取最小最大值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> min = <span class="built_in">Math</span>.min(...arr);</span><br><span class="line"><span class="keyword">const</span> max = <span class="built_in">Math</span>.max(...arr);</span><br><span class="line"><span class="comment">// min max =&gt; 0 2</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="String-Skill"><a href="#String-Skill" class="headerlink" title="String Skill"></a>String Skill</h2><blockquote>
<p>生成随机HEX色值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomColor = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"#"</span> + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>).toString(<span class="number">16</span>).padEnd(<span class="number">6</span>, <span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">const</span> color = randomColor();</span><br><span class="line"><span class="comment">// color =&gt; "#f03665"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取查询字符串参数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assuming "?post=1234&amp;action=edit"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> urlParams = <span class="keyword">new</span> URLSearchParams(<span class="built_in">window</span>.location.search);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.has(<span class="string">'post'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.get(<span class="string">'action'</span>)); <span class="comment">// "edit"</span></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.getAll(<span class="string">'action'</span>)); <span class="comment">// ["edit"]</span></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.toString()); <span class="comment">// "?post=1234&amp;action=edit"</span></span><br><span class="line"><span class="built_in">console</span>.log(urlParams.append(<span class="string">'active'</span>, <span class="string">'1'</span>)); <span class="comment">// "?post=1234&amp;action=edit&amp;active=1"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Array-Skill&quot;&gt;&lt;a href=&quot;#Array-Skill&quot; class=&quot;headerlink&quot; title=&quot;Array Skill&quot;&gt;&lt;/a&gt;Array Skill&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;统计元素个数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; count = arr.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;t, c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t[c] = t[c] ? ++ t[c] : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// count =&amp;gt; &amp;#123; 0: 1, 1: 2, 2: 3 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://shizhonghai.github.io/blog-daily/tags/JavaScript/"/>
    
  </entry>
  
</feed>
