<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是瘦子</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shizhonghai.github.io/"/>
  <updated>2020-07-08T03:11:42.370Z</updated>
  <id>https://shizhonghai.github.io/</id>
  
  <author>
    <name>I am a thin man</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于 ECharts canvas 层级太高 导致 tooltip 被遮盖</title>
    <link href="https://shizhonghai.github.io/2020/07/08/echart-tooltip/"/>
    <id>https://shizhonghai.github.io/2020/07/08/echart-tooltip/</id>
    <published>2020-07-07T16:00:00.000Z</published>
    <updated>2020-07-08T03:11:42.370Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*核心代码*/</span></span><br><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line"> <span class="attribute">z-index</span>: -<span class="number">1</span>;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
    
    </summary>
    
    
      <category term="EChart" scheme="https://shizhonghai.github.io/tags/EChart/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize 中 Model 的数据类型</title>
    <link href="https://shizhonghai.github.io/2020/05/27/sequelize-model-dataType/"/>
    <id>https://shizhonghai.github.io/2020/05/27/sequelize-model-dataType/</id>
    <published>2020-05-26T16:00:00.000Z</published>
    <updated>2020-05-27T03:49:42.128Z</updated>
    
    <content type="html"><![CDATA[<p>Sequelize 中 Model 的数据类型对应MySQL中的数据类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Sequelize.STRING                      // VARCHAR(255)                  类型：字符串 最大值： 65535个字符</span><br><span class="line">Sequelize.STRING(1234)                // VARCHAR(1234)                 类型：变长 最大值： 65535个字符</span><br><span class="line">Sequelize.TEXT                        // TEXT                          类型：字符串 最大值：65535个字符</span><br><span class="line">Sequelize.TEXT(&apos;tiny&apos;)                // TINYTEXT                      类型：字符串 最大值：255个字符</span><br><span class="line"></span><br><span class="line">Sequelize.INTEGER                     // INTEGER                       类型：整型 最大值：范围(-2147483648~2147483647)</span><br><span class="line">Sequelize.BIGINT                      // BIGINT                        类型：整型 最大值：范围(+-9.22*10的18次方)</span><br><span class="line">Sequelize.BIGINT(11)                  // BIGINT(11)                    类型：整型 最大值：范围(+-9.22*10的18次方)</span><br><span class="line"></span><br><span class="line">Sequelize.FLOAT                       // FLOAT                         类型：单精度浮点型  8位精度(4字节)</span><br><span class="line">Sequelize.FLOAT(11)                   // FLOAT(11)                     类型：单精度浮点型 8位精度(4字节)</span><br><span class="line">Sequelize.FLOAT(11, 12)               // FLOAT(11,12)                  类型：精度浮点型 8位精度(4字节) m总个数，d小数位</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sequelize.DOUBLE                      // DOUBLE                        类型：双精度浮点型 16位精度(8字节) </span><br><span class="line">Sequelize.DOUBLE(11)                  // DOUBLE(11)                    类型：双精度浮点型 16位精度(8字节) </span><br><span class="line">Sequelize.DOUBLE(11, 12)              // DOUBLE(11,12)                 类型：双精度浮点型 16位精度(8字节) m总个数，d小数位</span><br><span class="line"></span><br><span class="line">Sequelize.DECIMAL                     // DECIMAL                       类型：定点数型</span><br><span class="line">Sequelize.DECIMAL(10, 2)              // DECIMAL(10,2)                 类型：定点数型 参数m&lt;65 是总个数，d&lt;30且 d&lt;m 是小数位</span><br><span class="line"></span><br><span class="line">Sequelize.DATE                        // DATETIME                      类型：日期时间类型 范例：&apos;2009-05-12 02:31:44&apos;</span><br><span class="line">Sequelize.DATE(6)                     // DATETIME(6)    </span><br><span class="line">Sequelize.DATEONLY                    // DATE without time.</span><br><span class="line">Sequelize.BOOLEAN                     // TINYINT(1)                    类型：整型 范围(-128~127)</span><br><span class="line"></span><br><span class="line">Sequelize.ENUM(&apos;value 1&apos;, &apos;value 2&apos;)  // ENUM                          类型：枚举</span><br><span class="line"></span><br><span class="line">Sequelize.BLOB                        // BLOB                          类型：二进制数据</span><br><span class="line">Sequelize.BLOB(&apos;tiny&apos;)                // TINYBLOB                      类型：二进制数据</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sequelize 中 Model 的数据类型对应MySQL中的数据类型&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
    
    </summary>
    
    
      <category term="Sequelize" scheme="https://shizhonghai.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>关于 EChart 页面多个图表，改变窗体大小图表不渲染问题</title>
    <link href="https://shizhonghai.github.io/2020/04/14/echart-resize/"/>
    <id>https://shizhonghai.github.io/2020/04/14/echart-resize/</id>
    <published>2020-04-13T16:00:00.000Z</published>
    <updated>2020-04-14T03:58:12.090Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>1.图表宽度需设置成 100%</p>
</li>
<li><p>2.同页面多图表请用 <code>addEventListener</code> 方法监听窗体大小改变</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听窗口变化 - 只刷新最后一个图表,后定义的会覆盖前面定义的，只有1个生效</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    EChart.resize(); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听窗口变化 - 多个图表同时刷新</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;                </span><br><span class="line">	EChart.resize();           </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.图表宽度需设置成 100%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.同页面多图表请用 &lt;code&gt;addEventListener&lt;/code&gt; 方法监听窗体大小改变&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight ja
    
    </summary>
    
    
      <category term="EChart" scheme="https://shizhonghai.github.io/tags/EChart/"/>
    
  </entry>
  
  <entry>
    <title>Js 数组扁平化</title>
    <link href="https://shizhonghai.github.io/2020/04/13/javascript-arrary/"/>
    <id>https://shizhonghai.github.io/2020/04/13/javascript-arrary/</id>
    <published>2020-04-12T16:00:00.000Z</published>
    <updated>2020-04-13T11:58:40.897Z</updated>
    
    <content type="html"><![CDATA[<p>问题：[[0, 1], [2, 3], [4, 5]] -&gt; [0, 1, 2, 3, 4, 5]？</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote>
<p>利用 <code>es5</code> 的 <code>arr.reduce(callback[, initialValue])</code> 实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1.reduce( <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.concat(b) );</span><br><span class="line"><span class="comment">// arr2 [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote>
<p>多维数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>,[[[<span class="number">4</span>], <span class="number">5</span>]]]</span><br><span class="line"><span class="keyword">let</span>  flatten = <span class="function">(<span class="params">arr</span>) =&gt;</span> [].concat( ...arr.map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Array</span>.isArray(x) ? flatten(x) : x) )  </span><br><span class="line"><span class="keyword">let</span> arr2 = flatten(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr2)       <span class="comment">// arr2 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><blockquote>
<p>利用 <code>apply</code> 实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line"><span class="keyword">let</span> arr2 = [].concat.apply([], arr1);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);      <span class="comment">// arr2 [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><blockquote>
<p>利用 ES 的最新语法，<code>Array.prototype.flat()</code>。缺点是，有兼容性问题。优点是非常简单。<br>  <code>flat()</code> 方法会按照一个可指定的深度递归遍历数组(默认值为1)，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1.flat();     <span class="comment">// arr2 [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line"><span class="keyword">let</span> arr4 = arr3.flat();     <span class="comment">// arr4 [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr5 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line"><span class="keyword">let</span> arr6 = arr5.flat(<span class="number">2</span>);    <span class="comment">// arr6 [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">let</span> arrInfinity = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]];</span><br><span class="line"><span class="keyword">let</span> arr7 = arrInfinity.flat(<span class="literal">Infinity</span>);     <span class="comment">// arr7 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flat() 方法会移除数组中的空项，但 undefined、null 仍会保留</span></span><br><span class="line"><span class="keyword">let</span> arr8 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr9 = arr8.flat();             <span class="comment">// arr9 [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题：[[0, 1], [2, 3], [4, 5]] -&amp;gt; [0, 1, 2, 3, 4, 5]？&lt;/p&gt;
&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;利用 &lt;code&gt;es5&lt;/code&gt; 的 &lt;code&gt;arr.reduce(callback[, initialValue])&lt;/code&gt; 实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr1 = [[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr2 = arr1.reduce( &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.concat(b) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// arr2 [0, 1, 2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://shizhonghai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置 https 并强制跳转 443 端口</title>
    <link href="https://shizhonghai.github.io/2020/04/02/nginx-config-https/"/>
    <id>https://shizhonghai.github.io/2020/04/02/nginx-config-https/</id>
    <published>2020-04-01T16:00:00.000Z</published>
    <updated>2020-04-02T05:40:29.040Z</updated>
    
    <content type="html"><![CDATA[<p>在Nginx/Tengine服务器上安装证书</p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>申请证书时需要选择 系统自动创建CSR。</p>
<h2 id="操作指南"><a href="#操作指南" class="headerlink" title="操作指南"></a>操作指南</h2><p>1.登录阿里云<a href="https://yundunnext.console.aliyun.com/?p=casnext#/overview/cn-hangzhou" target="_blank" rel="noopener">SSL证书控制台</a>。</p>
<p>2.在SSL证书页面定位到需要下载的证书(如没有证书，请先购买)，并单击下载按钮<br><img src="/images/nginx-2020-04-02_11-37-31.png" alt="nginx https 配置1" title="nginx https 配置1"></p>
<a id="more"></a>
<p>3.在证书下载侧页面中定位到 Nginx 服务器，并单击右侧操作栏的下载，将 Nginx 服务器证书压缩包下载到本地。<br><img src="/images/nginx-2020-04-02_11-45-45.png" alt="nginx https 配置2" title="nginx https 配置2"></p>
<p>4.解压已下载保存到本地的 Nginx 证书压缩包文件。<br>解压后的文件夹中有2个文件：</p>
<ul>
<li>证书文件：以.pem为后缀或文件类型。</li>
<li>密钥文件：以.key为后缀或文件类型。</li>
</ul>
<p><img src="/images/nginx-2020-04-02_11-52-32.png" alt="nginx https 配置3" title="nginx https 配置3"></p>
<p>5.登录您的 Nginx 服务器，在Nginx安装目录（默认Nginx安装目录为/usr/local/nginx/conf）下创建cert目录，并将下载的证书文件和密钥文件拷贝到cert目录中。</p>
<blockquote>
<p>说明 如果您在申请证书时选择手动创建CSR文件，请将对应的密钥文件放到cert目录中，并命名为domain name.key。</p>
</blockquote>
<p>6.修改Nginx安装目录/conf/nginx.conf文件。<br>   按照下文中注释内容修改nginx.conf文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 以下属性中以ssl开头的属性代表与证书配置有关，其他属性请根据自己的需要进行配置。</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span><br><span class="line">    server_name localhost;  #将localhost修改为您证书绑定的域名，例如：www.example.com。</span><br><span class="line">    ssl_certificate ../cert/domain name.pem;   #将domain name.pem替换成您证书的文件名。</span><br><span class="line">    ssl_certificate_key ../cert/domain name.key;   #将domain name.key替换成您证书的密钥文件名。</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    # 以下配置主要做8086端口转发，具体配置请以实际项目为准   </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass_request_headers on;</span><br><span class="line">        proxy_http_version 1.1; </span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_pass http://127.0.0.1:8086; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 80端口重定向到443端口</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name xxxx.com;   # 你的域名</span><br><span class="line">    rewrite ^(.*)$ https://$host$1 permanent;   # 把http的域名请求转成https</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name xxx.com;</span><br><span class="line">    return 301 https://www.xxx.com$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7.保存nginx.conf文件后退出。<br>8.执行以下命令重启Nginx服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br><span class="line">nginx -s start</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Nginx/Tengine服务器上安装证书&lt;/p&gt;
&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;p&gt;申请证书时需要选择 系统自动创建CSR。&lt;/p&gt;
&lt;h2 id=&quot;操作指南&quot;&gt;&lt;a href=&quot;#操作指南&quot; class=&quot;headerlink&quot; title=&quot;操作指南&quot;&gt;&lt;/a&gt;操作指南&lt;/h2&gt;&lt;p&gt;1.登录阿里云&lt;a href=&quot;https://yundunnext.console.aliyun.com/?p=casnext#/overview/cn-hangzhou&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSL证书控制台&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2.在SSL证书页面定位到需要下载的证书(如没有证书，请先购买)，并单击下载按钮&lt;br&gt;&lt;img src=&quot;/images/nginx-2020-04-02_11-37-31.png&quot; alt=&quot;nginx https 配置1&quot; title=&quot;nginx https 配置1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="https://shizhonghai.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>WebStorm 如何识别 Webpack 中的别名</title>
    <link href="https://shizhonghai.github.io/2020/04/02/webstorm-webpack-config/"/>
    <id>https://shizhonghai.github.io/2020/04/02/webstorm-webpack-config/</id>
    <published>2020-04-01T16:00:00.000Z</published>
    <updated>2020-04-02T09:54:36.961Z</updated>
    
    <content type="html"><![CDATA[<p>例如：在webpack.base.config.js 文件中的别名配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, <span class="string">'.'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    context: path.resolve(__dirname, <span class="string">'./'</span>),</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">            <span class="string">'@views'</span>: resolve(<span class="string">'src/views'</span>),</span><br><span class="line">            <span class="string">'@components'</span>: resolve(<span class="string">'src/components'</span>),</span><br><span class="line">            <span class="string">'@core'</span>: resolve(<span class="string">'src/core'</span>),</span><br><span class="line">            <span class="string">'@utils'</span>: resolve(<span class="string">'src/utils'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>WebStorm Windows setting：<br><code>File &gt; Settings &gt; Languages and Frameworks &gt;JavaScript | Webpack</code></p>
<p>WebStorm MacOS setting：</p>
<p><code>WebStorm | Preferences | Languages and Frameworks | JavaScript | Webpack</code></p>
<p>配置如下图：<br><img src="/images/webstorm-webpack-config.png" alt="WebStorm 配置" title="WebStorm 配置"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;例如：在webpack.base.config.js 文件中的别名配置&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
    
    </summary>
    
    
      <category term="WebStorm" scheme="https://shizhonghai.github.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title>Linux 下安装 pm2 后找不到 pm2 命令解决方法</title>
    <link href="https://shizhonghai.github.io/2020/03/31/node-pm2/"/>
    <id>https://shizhonghai.github.io/2020/03/31/node-pm2/</id>
    <published>2020-03-30T16:00:00.000Z</published>
    <updated>2020-03-31T06:18:31.632Z</updated>
    
    <content type="html"><![CDATA[<p>今天安装pm2碰到一个问题，使用 <code>npm install pm2 -g</code> 安装完成时，找不到 pm2 命令：</p>
<p><img src="/images/pm2-01.png" alt="npm install pm2" title="npm install pm2"></p>
<p>在安装提示中可以看到 pm2 安装位置，此时我们只要使用以下命令将 pm2 放入系统路径下就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/src/node-v12.13.0-linux-x64/bin/pm2 /usr/local/bin/</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天安装pm2碰到一个问题，使用 &lt;code&gt;npm install pm2 -g&lt;/code&gt; 安装完成时，找不到 pm2 命令：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pm2-01.png&quot; alt=&quot;npm install pm2&quot; title=&quot;npm 
    
    </summary>
    
    
      <category term="pm2" scheme="https://shizhonghai.github.io/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 优化总会让你不得不爱</title>
    <link href="https://shizhonghai.github.io/2020/03/02/webpack-optimization/"/>
    <id>https://shizhonghai.github.io/2020/03/02/webpack-optimization/</id>
    <published>2020-03-01T16:00:00.000Z</published>
    <updated>2020-03-03T05:59:53.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="加油"><a href="#加油" class="headerlink" title="加油"></a>加油</h2><p>在家的日子不能出去玩，不能出去吃，的确是很不开心的，不过也是真的增加了好多空闲时间</p>
<p>与其在家呆着无聊，不如安安静静的学习一下</p>
<p>疫情期间，不管怎样，心态不能崩，武汉加油，中国加油</p>
<p>闲言少叙，现在我们就开始一起学习吧</p>
<h2 id="优化是个好词"><a href="#优化是个好词" class="headerlink" title="优化是个好词"></a>优化是个好词</h2><p><strong>优化</strong>，就是加以改变或选择使优良，在工作当中是让提升效率的好办法。<br>当然，webpack 优化千千万，但我觉得这些就够了<br>首当其冲的，就是工作中那些用不到的样式，可能是由于历史遗留原因已经忘记哪些是没有使用的样式了，一一排查太过耗时费力了<br>于是，<code>purgecss-webpack-plugin</code> 和 <code>glob</code> 它俩就登场了，它的作用就是解决上面提到的问题，让我们来看看如何使用吧<br>插件千万个，安装第一步：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i purgecss-webpack-plugin glob -D</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="去除无用的样式"><a href="#去除无用的样式" class="headerlink" title="去除无用的样式"></a>去除无用的样式</h3><p>工欲善其事必先利其器，装备好了，我们也来看一眼实际的情况，然后再进行有效的配置吧<br><img src="/images/webpack-01.jpg" alt="webpack 配置" title="webpack 配置"><br>上图中就有一个没有被使用到的类名logo，所以如果在打包抽离出来的css文件里，肯定是不希望看到它的<br>那么，不废话，解决它，我们开始配置吧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// html模板</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">// 从js中抽离出css</span></span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除无用的样式</span></span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"><span class="keyword">const</span> PurgecssWebpackPlugin = <span class="built_in">require</span>(<span class="string">'purgecss-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        path: path.resolve(<span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;   </span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [MiniCssExtractPlugin.loader, <span class="string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpaclPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(),</span><br><span class="line">        <span class="comment">// 去除无用的样式</span></span><br><span class="line">        <span class="keyword">new</span> PurgecssWebpackPlugin(&#123;</span><br><span class="line">            paths: glob.sync(<span class="string">'./src/**/*'</span>, &#123;<span class="attr">nodir</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>配置完毕了，上面包含了一些基本的配置。大家可以把重点放在<strong>注释为去除无用的样式</strong>代码部分即可了</p>
<p>下面我们来简单分析分析：</p>
<ul>
<li><p>glob是用来查找文件的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">glob.sync(<span class="string">'./src/**/*'</span>, &#123;<span class="attr">nodir</span>: <span class="literal">true</span>&#125;</span><br><span class="line"><span class="comment">// 同步查找src目录下的任意文件夹下的任意文件</span></span><br><span class="line"><span class="comment">// 返回一个数组，如['真实路径/src/css/style.css','真实路径/src/index.js',...]</span></span><br><span class="line"><span class="comment">// &#123;nodir: true&#125;表示不包含文件夹，加快查找速度</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>purgecss-webpack-plugin是去除无用的css</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> PurgecssWebpackPlugin(&#123;</span><br><span class="line">    <span class="comment">// paths表示指定要去解析的文件名数组路径</span></span><br><span class="line">    <span class="comment">// Purgecss会去解析这些文件然后把无用的样式移除</span></span><br><span class="line">    paths: glob.sync(<span class="string">'./src/**/*'</span>, &#123;<span class="attr">nodir</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/images/webpack-02.jpg" alt="webpack 配置2" title="webpack 配置2"></p>
<p>大功告成，进入下一环节！！！</p>
<h3 id="动态添加CDN"><a href="#动态添加CDN" class="headerlink" title="动态添加CDN"></a>动态添加CDN</h3><p>在 <code>html</code> 文件中引入cdn文件，在 webpack 配置 <code>externals</code>，这样就不会打包引入的cdn的库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html文件</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"root"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 引入jquery的cdn --&gt;</span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ webpack.config.js文件</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">module.exports = &#123;</span></span><br><span class="line"><span class="regexp">    externals: &#123;</span></span><br><span class="line"><span class="regexp">        'jquery': '$'</span></span><br><span class="line"><span class="regexp">    &#125;   </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样写完后，在js文件中我们就可以不用再导入jquery也能直接使用$操作符了<br>But，这只是个过渡而已，下面有请主角登场<br>由于每次都需要在index.html模板中手动引入需要的cdn文件，然后还要在webpack里配置，有点繁琐了<br>So， <code>html-webpack-externals-plugin</code> 这样的插件就应运而生了<br>安装步骤我就略过了，直接看代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态添加CDN</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackExternalsPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-externals-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackExternalsPlugin(&#123;</span><br><span class="line">            externals: [</span><br><span class="line">                &#123;   <span class="comment">// 引入的模块</span></span><br><span class="line">                    <span class="built_in">module</span>: <span class="string">'jquery'</span>,</span><br><span class="line">                    <span class="comment">// cdn的地址</span></span><br><span class="line">                    entry: <span class="string">'https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js'</span>,</span><br><span class="line">                    <span class="comment">// 挂载到了window上的名称</span></span><br><span class="line">                    <span class="comment">// window.jQuery就可以全局使用</span></span><br><span class="line">                    global: <span class="string">'jQuery'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">module</span>: <span class="string">'vue'</span>,</span><br><span class="line">                    entry: <span class="string">'https://cdn.bootcss.com/vue/2.6.10/vue.min.js'</span>,</span><br><span class="line">                    global: <span class="string">'Vue'</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack-03.jpg" alt="webpack 配置3" title="webpack 配置3"></p>
<h3 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h3><p>这是一个webpack内置的优化能力，webpack很好很强大，哈哈<br>在生产环境下，Tree-shaking会进行自动删除的操作<br>如果通过ES6的import引用的方式就会把没有用到的代码给删除掉<br>那么在打包的时候，就不会打包那些未引用的方法了<br>接下来，我们看个栗子：<br>在src目录下新建一个common.js，然后在里面随便写点东东</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/common.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'my-flatten'</span>);</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">all, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(cur) &#123;</span><br><span class="line">            <span class="keyword">return</span> [...all, ...flatten(cur)];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [...all, cur];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myBind = <span class="function">(<span class="params">fn, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'my-bind'</span>);</span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newArgs = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        fn.apply(context, args.concat(newArgs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>import</code> 引用一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; flatten &#125; <span class="keyword">from</span> <span class="string">'./common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,[<span class="number">3</span>,[<span class="number">4</span>, <span class="number">5</span>]], [<span class="number">2</span>, [<span class="number">20</span>]]];</span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr));</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack-04.jpg" alt="webpack 配置4" title="webpack 配置4"><br>因为只在生产环境下有效果，可以去dist文件中检查一下，是没有 <code>console.log(&#39;my-bind&#39;)</code> 的代码的，这就说明完美的去掉了没有引用到的代码了<br>完美，完美，完美了</p>
<p>高兴的太早了，是药三分毒，有副作用的</p>
<p><strong>副作用</strong></p>
<p>现在我们在src目录再创建一个test.js文件，让大家再感受一下副作用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/test.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure>
<p>此时，简单修改一下index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; flatten &#125; <span class="keyword">from</span> <span class="string">'./common'</span>;</span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'./test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,[<span class="number">3</span>,[<span class="number">4</span>, <span class="number">5</span>]], [<span class="number">2</span>, [<span class="number">20</span>]]];</span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr));</span><br></pre></td></tr></table></figure>
<p>尽管引入了test但是并没有使用，可是打包后的bundle.js文件却变化了，请看大屏幕<br><img src="/images/webpack-05.jpg" alt="webpack 配置5" title="webpack 配置5"></p>
<p>可想而知，<strong>副作用</strong>出现了，去dist目录下再看看bundle.js的内容，发现了打印test字段的代码。<br>肿么办？没引用却打包进去了，表慌，让我们来将文件标记为无副作用的<br>干掉副作用<br>需要配合 <code>package.json</code> 文件，在里面添加一个 <code>sideEffects</code> 属性，赋值为 <code>false</code> 就把这些<strong>副作用</strong>给干掉了不会再打包进去了，So Easy</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json文件</span></span><br><span class="line">&#123;</span><br><span class="line">    ...省略</span><br><span class="line">    <span class="string">"sideEffects"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack-06.jpg" alt="webpack 配置6" title="webpack 配置6"></p>
<p>不过貌似，没有看到打包出来的css文件呢，回头看之前的截图，是打包出3个文件的，其中就包括 main.css<br>CSS去哪儿了？<br>很好理解，因为我们在js中引入css文件是 <code>import &#39;./style.css&#39;</code> 这样，所以就出现了副作用，引用却没使用的尴尬<br>也是因为 <code>sideEffects: false</code> 一股脑的全给标记过滤掉了<br>现在修改一下 <code>sideEffects</code> 的值就可以，给它一个去除副作用的范围</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json文件</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    ...省略</span><br><span class="line">    <span class="string">"sideEffects"</span>: [<span class="string">"./src/**/*.css"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤掉引入的css文件产生的副作用，这样走丢的css文件就又找回来了<br><img src="/images/webpack-07.jpg" alt="webpack 配置7" title="webpack 配置7"><br>至此，webpack内置的Tree-shaking就说完了，是不是很有意思，webpack大法好<br>下面一鼓作气继续说个内置的插件，非常实用，come on baby</p>
<h3 id="DllPlugin动态链接库"><a href="#DllPlugin动态链接库" class="headerlink" title="DllPlugin动态链接库"></a>DllPlugin动态链接库</h3><p>很多时候我们在开发时无论是用React还是Vue，我们都不希望这个开发的主力框架每次都被打包一遍，这样也是费时费力的事情<br>所以，出现了DllPlugin这种插件，它纯属webpack内置的，放心大胆的用<br>作用：</p>
<p>在第一次打包的时候就把打包用到的开发框架直接打包好，然后会生成一个 <code>manifest.json</code> 文件<br>再打包的时候，只要有 <code>import React from &#39;react&#39;</code> 这样的引用，它就会先去所谓的缓存文件里找，找到了就直接用，也不用再进行对react打包了<br>当然，如果没找到的话，再对框架打包一遍也无伤大雅</p>
<p>说多了，都是泪，看代码更实在，重写index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span>;</span><br><span class="line"></span><br><span class="line">render(&lt;React.Fragment&gt;</span><br><span class="line">    &lt;h1 className="title"&gt;听妈妈的话-周杰伦&lt;/h1&gt;</span><br><span class="line">    &lt;button className="btn"&gt;显示歌词&lt;/button&gt;</span><br><span class="line">&lt;/React.Fragment&gt;, window.root);</span><br></pre></td></tr></table></figure>
<p>把index.js重写后我们再来npm run build打包一下看看<br><img src="/images/webpack-08.jpg" alt="webpack 配置8" title="webpack 配置8"></p>
<p>但是这很不科学，因为很多时候没有必要把开发框架也打包到我们写的逻辑代码中<br>所以，接下来我们来看看DllPlugin会帮我们怎么处理吧</p>
<h4 id="创建动态链接库"><a href="#创建动态链接库" class="headerlink" title="创建动态链接库"></a>创建动态链接库</h4><p>在<strong>根目录下</strong>创建一个 <code>webpack.dll.js</code> 文件，用来打包出dll文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// 引入webpack</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>],</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'react.dll.js'</span>,</span><br><span class="line">        path: path.resolve(<span class="string">'dll'</span>),</span><br><span class="line">        library: <span class="string">'react'</span>    <span class="comment">// 打包后被引用的变量名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 动态链接库</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">            name: <span class="string">'react'</span>,</span><br><span class="line">            path: path.resolve(<span class="string">'dll'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>代码写完了，<code>npm run dll</code>，之后会出现一个dll的文件夹，里面会包含你打包出来的文件，如下图<br><img src="/images/webpack-09.jpg" alt="webpack 配置9" title="webpack 配置9"><br>打包完成后，接下来轮到我们引用的时刻到了</p>
<h4 id="引用动态链接库"><a href="#引用动态链接库" class="headerlink" title="引用动态链接库"></a>引用动态链接库</h4><p>回到我们的主战场webpack.config.js中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// 引入webpack</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 引用对应的动态链接库的manifest.json文件</span></span><br><span class="line">        <span class="comment">// 这样以后再引入react的时候就会优先在json文件里去寻找</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">            manifest: path.resolve(<span class="string">'dll'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>写到这里还不算完，还需要在src目录下的index.html模板中引入一下<br><code>&lt;script src=&quot;../dll/react.dll.js&quot;&gt;&lt;/script&gt;</code><br>插一句：之所以，会新建一个dll目录，因为在 <code>npm run dev</code> 开发环境编译的时候，dist目录的内容都在内存中了，是找不到react.dll.js文件的<br>好了，现在让我们看看效果吧，<code>npm run dev</code> 启动一下<br><img src="/images/webpack-10.jpg" alt="webpack 配置10" title="webpack 配置10"></p>
<p>当然，也许有人会问，如果需要引入的文件比较多怎么办？<br>每次在index.html中手动引入毕竟不是长久之计，那么接下来就再看一个好东东</p>
<h4 id="动态引入js"><a href="#动态引入js" class="headerlink" title="动态引入js"></a>动态引入js</h4><p>通过 <code>add-asset-html-webpack-plugin</code> 插件就可以完成这样的需求，来看代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="comment">// 添加资源到html文件</span></span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 引用打包好的react，不会打包到bundle里</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">            manifest: path.resolve(<span class="string">'dll'</span>, <span class="string">'manifest.json'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 直接将打包好的react.dll.js添加到html模板</span></span><br><span class="line">        <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">            filepath: path.resolve(<span class="string">'dll'</span>, <span class="string">'react.dll.js'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过上面的改造后，就动态的把react.dll.js文件添加到html文件中了。</p>
<p>我们之前在index.html模板里手动引入js的那一行就可以删除掉了</p>
<h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>说到懒加载必然是一种很好的优化网页或应用的方式，那么在webpack中也是通过ES6的 <code>import()</code> 语法来引入的。<br>虽然这个 <code>import()</code> 语法目前还处在草案的第三阶段，不过并不影响大家对它的一致好评<br>用过Vue-Router的同学都知道，大家写的路由通过 <code>component: () =&gt; import()</code> 的方式，也是可以进行懒加载的<br>So，好饭不怕晚，早晚会成为正式一员的。下面还是用实际栗子演示一下吧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写个辅助的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Music</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">lrc</span>: [] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    showLrc() &#123;</span><br><span class="line">        <span class="comment">// 通过ES6的import()方法实现了懒加载功能，实际上是利用了jsonp去动态导入了</span></span><br><span class="line">        <span class="keyword">import</span>(<span class="string">'./lrc'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> lrc = data.default.split(<span class="string">'\n'</span>).filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== <span class="string">''</span>);</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123; lrc &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button className=<span class="string">"btn"</span> onClick=&#123;() =&gt; <span class="keyword">this</span>.showLrc()&#125;&gt;显示歌词&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div className="lrc-box"&gt;</span></span><br><span class="line"><span class="regexp">                    &#123;this.state.lrc &amp;&amp; this.state.lrc.map((item, index) =&gt; (</span></span><br><span class="line"><span class="regexp">                        &lt;p className="lrc" key=&#123;index&#125;&gt;&#123;item&#125;&lt;/</span>p&gt;</span><br><span class="line">                    ))&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;      </span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(&lt;React.Fragment&gt;</span><br><span class="line">    &lt;h1 className="title"&gt;听妈妈的话-周杰伦&lt;/h1&gt;</span><br><span class="line">    &lt;Music&gt;&lt;/Music&gt;</span><br><span class="line">&lt;/React.Fragment&gt;, window.root);</span><br></pre></td></tr></table></figure>
<p><code>npm run dev</code> 让我们看看是不是有了懒加载的效果<br><img src="/images/webpack-11.gif" alt="webpack 配置11" title="webpack 配置11"><br>通过上面的gif图可以看到，当点击显示歌词的时候，加载了一个0.bundle.js文件<br>这个文件就是我们通过懒加载导入的lrc.js文件，由此可见，懒加载功能验证成功，撒花</p>
<p>接下来再来个老生常谈的优化，请继续往下看，不要停</p>
<h3 id="抽取公共代码"><a href="#抽取公共代码" class="headerlink" title="抽取公共代码"></a>抽取公共代码</h3><p>开发的时候，经常会有不同的模块引用了同一个第三方包。<br>这里举个栗子，比如有两个js文件，一个是index.js另一个是lrc.js，它们都引用了著名的实用工具库lodash，代码如下下下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(_.xor([<span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// lrc.js文件</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(_.flatten([<span class="number">1</span>,[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, [<span class="number">2</span>]]]));</span><br></pre></td></tr></table></figure>
<p>看完以上代码就明白了，他们的公共部分就是都引了lodash，这样会分别打包到他们所在的文件中去，这样打包的js文件就会很大了</p>
<p>所以，必须得把lodash提取出来，废话不多说，看招</p>
<h4 id="抽取第三方模块"><a href="#抽取第三方模块" class="headerlink" title="抽取第三方模块"></a>抽取第三方模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    chunks: <span class="string">'initial'</span>,</span><br><span class="line">                    minSize: <span class="number">0</span>,</span><br><span class="line">                    minChunks: <span class="number">2</span>,</span><br><span class="line">                    test: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                    priority: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>webpack4中自带了抽取公共代码的方法，通过optimization里的splitChunks来做到<br><img src="/images/webpack-12.jpg" alt="webpack 配置12" title="webpack 配置12"><br>抽离第三方模块有两点好处</p>
<ul>
<li>不会和业务逻辑打包在一起</li>
<li>增加缓存 304</li>
</ul>
<h4 id="抽取公共模块"><a href="#抽取公共模块" class="headerlink" title="抽取公共模块"></a>抽取公共模块</h4><p>当然了，项目中很多js文件不仅仅会引用第三方模块来开发，我们也会使用写好的公共模块，那么是不是也可以提取出来呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; flatten &#125; <span class="keyword">from</span> <span class="string">'./common'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'index'</span>,flatten([<span class="number">1</span>,[<span class="number">33</span>, <span class="number">4</span>, <span class="number">5</span>, [<span class="number">34</span>]]]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// lrc.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;flatten&#125; <span class="keyword">from</span> <span class="string">'./common'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(flatten([<span class="number">1</span>,[<span class="number">33</span>, <span class="number">4</span>, <span class="number">5</span>, [<span class="number">34</span>]]]));</span><br></pre></td></tr></table></figure>
<p>上面在两个js文件中都引入了common.js中写好的flatten方法，既然它们都引用到了common.js，所以想当然的也可以把它抽取出来的</p>
<p>那么参照提取第三方代码的实现来写一下吧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                utils: &#123;</span><br><span class="line">                    chunks: <span class="string">'initial'</span>,</span><br><span class="line">                    minSize: <span class="number">0</span>,</span><br><span class="line">                    minChunks: <span class="number">2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack-13.png" alt="webpack 配置13" title="webpack 配置13"><br>以上就是抽取公共代码部分了，到此为止了</p>
<h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><p>热更新对于开发来说可以说是非常高效的，而且webpack现在也自带插件支持热更新了</p>
<p>通过 <strong>devServer</strong> 来启动热更新</p>
<p>☆：devServer的使用需要在项目中提前安好 <strong>webpack-dev-server</strong></p>
<p>那么我们先来看看配置部分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入webpack</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        hot: <span class="literal">true</span>,  <span class="comment">// 启动热更新</span></span><br><span class="line">        port: <span class="number">8080</span>,</span><br><span class="line">        contentBase: <span class="string">'./dist'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// webpack支持热更新插件</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        <span class="comment">// 打印更新了的文件路径</span></span><br><span class="line">        <span class="keyword">new</span> webpack.NamedModulesPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>热更新只适合在开发环境下来搞，所以配置好后，再执行 <code>npm run dev</code></p>
<p>现在让我们回到index.js文件里去，让我们感受一下</p>
<p>// index.js文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 热更新</span></span><br><span class="line"><span class="comment">// 在src目录下新创建了audio.js文件</span></span><br><span class="line"><span class="comment">// 需要导入这个文件，不然热更新失效</span></span><br><span class="line"><span class="keyword">import</span> audio <span class="keyword">from</span> <span class="string">'./audio'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否支持热更新</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="comment">// 接收热更新的模块</span></span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">'./audio.js'</span>, (path) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(path);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'audio文件更新了'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了热更新操作，接收了audio.js文件，所以在audio.js文件内部如果进行修改保存后，会在控制台里展示对应的更新信息，如下图</p>
<p><img src="/images/webpack-14.jpg" alt="webpack 配置14" title="webpack 配置14"></p>
<p>热更新现在可是开发中的老朋友，很多IDE都配置了热更新操作，比如像Android Studio这样的编译器，通过热更新来加快编译速度<br>好了，不啰嗦了，下面还是干货满满的，Enjoy it</p>
<h3 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h3><p>严格意义上来讲，通过webpack来做跨域请求实际上也不能算在优化里。不过在开发中，这种跨域的情况还是很多的，了解了也不吃亏，一起看看吧</p>
<p>还是通过老朋友devServer来实现的，上代码</p>
<h4 id="第一种跨域方式"><a href="#第一种跨域方式" class="headerlink" title="第一种跨域方式"></a>第一种跨域方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="comment">// 可以这样写</span></span><br><span class="line">            <span class="comment">// '/api': 'http://localhost:3000',</span></span><br><span class="line">            <span class="comment">// 也可以这样写，多配置</span></span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过devServer提供的proxy属性，可以完成我们想要的跨域请求，下面看看参数都是干什么的</p>
<ul>
<li><p>target<br>指定要跨域请求的url<br>比如你请求/api/userInfo就会代理到<a href="http://localhost:3000/api/userInfo" target="_blank" rel="noopener">http://localhost:3000/api/userInfo</a></p>
</li>
<li><p>pathRewrite<br>顾名思义，重写路径<br>接口不可能都是/api开头的，所以如果遇到个接口是/getSongs<br>而不是/api/getSongs的接口地址，会把以/api重写改为空字符<br>最后就可以访问<a href="http://localhost:3000/getSongs" target="_blank" rel="noopener">http://localhost:3000/getSongs</a></p>
</li>
</ul>
<h4 id="第二种跨域方式"><a href="#第二种跨域方式" class="headerlink" title="第二种跨域方式"></a>第二种跨域方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// 利用node来写</span></span><br><span class="line">        before(app) &#123;</span><br><span class="line">            <span class="comment">// 相当于直接写了后端的接口，哈哈</span></span><br><span class="line">            app.get(<span class="string">'/api/info'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                res.json(&#123;</span><br><span class="line">                    nickname: <span class="string">'我滴个大榴莲啊'</span>,</span><br><span class="line">                    level: <span class="number">8</span>,</span><br><span class="line">                    src: <span class="string">'https://music.163.com/song/media/outer/url?id=1382794914.mp3'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>当然，以上两种方式大家知道即可了，第一种也是最普遍的实现方式，妈妈再也不用担心我的跨域问题了</p>
<h3 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h3><p>作用： <strong>忽略打包</strong>第三方模块指定的目录</p>
<p>为什么要忽略呢？ 通过下面的栗子来看一下</p>
<p>相信很多人应该或多或少的都听过moment这个时间库，不知道也没关系，我来演示一波</p>
<p>先安装moment： <code>npm i moment -S</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入moment</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置中文</span></span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>);</span><br><span class="line"><span class="keyword">let</span> time = moment().endOf(<span class="string">'day'</span>).fromNow();</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.root.innerHTML += time;</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack-15.jpg" alt="webpack 配置15" title="webpack 配置15"></p>
<p>页面上展示的一点毛病都没有，不过如果看一下打包的情况就会发现有瑕疵了，你看<br><img src="/images/webpack-16.jpg" alt="webpack 配置16" title="webpack 配置16"></p>
<p>设置了中文，却把整个语言包都打包进去了，这样很不好<br>这是神马原因呢，其实是因为moment被导入的时候，附赠了整个locale语言包，这种买一赠一的行为就不用提现在代码世界了，吃不消了<br><img src="/images/webpack-17.jpg" alt="webpack 配置17" title="webpack 配置17"></p>
<p>我们需要用中文包，但是不想打包全部语言包，就让IgnorePlugin出马了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 忽略moment目录下的locale文件夹</span></span><br><span class="line">        <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>, /moment/)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>配置改写后，再回到index.js中单独导入中文语言包就好了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用IgnorePlugin把只需要的语言包导入使用就可以了，省去了一下子打包整个语言包</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="comment">// 单独导入中文语言包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time = moment().endOf(<span class="string">'day'</span>).fromNow();</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.root.innerHTML += time;</span><br></pre></td></tr></table></figure>
<p>再重新 <code>npm run build</code> 打包后，体积瞬间减少了278k啊啊啊啊，下图显示<br><img src="/images/webpack-18.jpg" alt="webpack 配置18" title="webpack 配置18"></p>
<h3 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h3><p>noParse的作用是不去解析你所使用的第三方库中的<strong>依赖库</strong></p>
<p>废话不多说，直接上代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 不去解析jquery或lodash中的依赖库</span></span><br><span class="line">        noParse: <span class="regexp">/jquery|lodash/</span>,  </span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在工作中，忽略大型的库可以<strong>提高构建性能</strong>，可以从构建时间上看出来速度的提升，如上面代码中提到的jquery和lodash</p>
<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p>从这个英文就能看出来，它就是配置模块如何解析用的，配置太多也没必要一一介绍了，还是直接说重点写出常用的配置吧</p>
<p>resolve常用配置</p>
<ul>
<li>modules<br>指定解析第三方包的目录位置</li>
<li>alias<br>指定import导入时的别名，简化引入</li>
<li>extensions<br>自动解析确定好的扩展名<br>默认会把js和json当做扩展名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        modules: [resolve(<span class="string">'node_modules'</span>)],</span><br><span class="line">        alias: &#123;</span><br><span class="line">            Utils: resolve(__dirname, <span class="string">'src/utils/'</span>),</span><br><span class="line">            <span class="string">'@'</span>: resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.css'</span>, <span class="string">'.json'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此刻，我们往src目录下创建一个utils文件夹，然后新建一个parse-url.js文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/utils/parse-url.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 就简单导出一下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'我是解析url的方法'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/index.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> parseUrl <span class="keyword">from</span> <span class="string">'Utils/parse-url'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(parseUrl); <span class="comment">// 打印：我是解析url的方法</span></span><br></pre></td></tr></table></figure>
<p>上面代码为我们展示了alias别名的效果，真的是很有用很方便的，哈哈</p>
<h3 id="include和exclude"><a href="#include和exclude" class="headerlink" title="include和exclude"></a>include和exclude</h3><ul>
<li>include: 包含指定目录下的文件解析</li>
<li>exclude: 排除指定目录不进行解析<br>二者使用一个即可了，想必这个优化的点大家并不陌生的，看眼代码吧</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                exculde: <span class="regexp">/node_modules/</span>,    <span class="comment">// 二选一</span></span><br><span class="line">                include: path.resolve(<span class="string">'src'</span>)    <span class="comment">// 二选一</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="happypack"><a href="#happypack" class="headerlink" title="happypack"></a>happypack</h3><p>webpack在Node环境下运行所以也是单线程操作，一件一件的去处理事情。这样很不nice，本着现在cpu都那么威猛的情况下，运用多核运算完全是小儿科的<br>于是乎，就有了happypack的用武之地了，它的作用就是可以实现<strong>多进程打包操作</strong><br>下面我们再来看下是如何配置的<br>配置前先来安装一下 <code>npm i happypack -D</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Happypack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: <span class="string">'Happypack/loader?id=js'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: <span class="string">'Happypack/loader?id=css'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> Happypack(&#123;</span><br><span class="line">            id: <span class="string">'js'</span>,</span><br><span class="line">            use: [</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        presets: [</span><br><span class="line">                            <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                            <span class="string">'@babel/preset-react'</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> Happypack(&#123;</span><br><span class="line">            id: <span class="string">'css'</span>,</span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>差不多了，大家真的辛苦了，哈哈，坚持看下来的小伙伴，真是太给力了</p>
<h2 id="简单几句"><a href="#简单几句" class="headerlink" title="简单几句"></a>简单几句</h2><p>优化的内容有多种多样，也不会全部都包含，上面提到的也都是比较常见的一些优化方式，各取所需、各取所用就好了</p>
<p>还是那句话，疫情总会过去的，没什么好怕的，一起努力吧！！！</p>
<p>感谢大家，886</p>
<blockquote>
<p>文章来源：<a href="https://juejin.im/post/5cceecb7e51d453ab908717c#heading-24" title="Webpack 优化总会让你不得不爱" target="_blank" rel="noopener">Webpack 优化总会让你不得不爱</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;加油&quot;&gt;&lt;a href=&quot;#加油&quot; class=&quot;headerlink&quot; title=&quot;加油&quot;&gt;&lt;/a&gt;加油&lt;/h2&gt;&lt;p&gt;在家的日子不能出去玩，不能出去吃，的确是很不开心的，不过也是真的增加了好多空闲时间&lt;/p&gt;
&lt;p&gt;与其在家呆着无聊，不如安安静静的学习一下&lt;/p&gt;
&lt;p&gt;疫情期间，不管怎样，心态不能崩，武汉加油，中国加油&lt;/p&gt;
&lt;p&gt;闲言少叙，现在我们就开始一起学习吧&lt;/p&gt;
&lt;h2 id=&quot;优化是个好词&quot;&gt;&lt;a href=&quot;#优化是个好词&quot; class=&quot;headerlink&quot; title=&quot;优化是个好词&quot;&gt;&lt;/a&gt;优化是个好词&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;优化&lt;/strong&gt;，就是加以改变或选择使优良，在工作当中是让提升效率的好办法。&lt;br&gt;当然，webpack 优化千千万，但我觉得这些就够了&lt;br&gt;首当其冲的，就是工作中那些用不到的样式，可能是由于历史遗留原因已经忘记哪些是没有使用的样式了，一一排查太过耗时费力了&lt;br&gt;于是，&lt;code&gt;purgecss-webpack-plugin&lt;/code&gt; 和 &lt;code&gt;glob&lt;/code&gt; 它俩就登场了，它的作用就是解决上面提到的问题，让我们来看看如何使用吧&lt;br&gt;插件千万个，安装第一步：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i purgecss-webpack-plugin glob -D&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Webpack" scheme="https://shizhonghai.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>lowdb</title>
    <link href="https://shizhonghai.github.io/2020/02/21/lowdb/"/>
    <id>https://shizhonghai.github.io/2020/02/21/lowdb/</id>
    <published>2020-02-20T16:00:00.000Z</published>
    <updated>2020-02-21T07:11:56.611Z</updated>
    
    <content type="html"><![CDATA[<p>NPM 源地址 ： <a href="https://www.npmjs.com/package/lowdb" target="_blank" rel="noopener">https://www.npmjs.com/package/lowdb</a></p>
<blockquote>
<p>用于Node，Electron和浏览器的小型JSON数据库。由Lodash提供技术支持</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">  .push(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'lowdb is awesome'</span>&#125;)</span><br><span class="line">  .write()</span><br></pre></td></tr></table></figure>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lowdb</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> low = <span class="built_in">require</span>(<span class="string">'lowdb'</span>);</span><br><span class="line"><span class="keyword">const</span> FileSync = <span class="built_in">require</span>(<span class="string">'lowdb/adapters/FileSync'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> FileSync(<span class="string">'db.json'</span>); <span class="comment">// 存储到db.json文件中</span></span><br><span class="line"><span class="keyword">const</span> db = low(adapter);	</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一些默认值</span></span><br><span class="line">db.defaults(&#123;<span class="attr">posts</span>: [], <span class="attr">user</span>: &#123;&#125;&#125;).write();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个post</span></span><br><span class="line">db.get(<span class="string">'posts'</span>).push(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'lowdb is awesome'</span>&#125;).write();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Lodash简写语法设置用户</span></span><br><span class="line">db.set(<span class="string">'user.name'</span>, <span class="string">'typicode'</span>).write();</span><br></pre></td></tr></table></figure>
<p>数据保存到db.json<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"posts"</span>: [</span><br><span class="line">    &#123; <span class="string">"id"</span>: <span class="number">1</span>, <span class="string">"title"</span>: <span class="string">"lowdb is awesome"</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"user"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"typicode"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你可以使用任何 <a href="https://lodash.com/docs" target="_blank" rel="noopener">lodash</a> 函数 <a href="https://lodash.com/docs#get" target="_blank" rel="noopener">_.get</a> 和 <a href="https://lodash.com/docs#find" target="_blank" rel="noopener">_.find</a> 简写语法</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果您只是从db读取，请使用.value（）而不是.write（）</span></span><br><span class="line">db.get(<span class="string">'posts'</span>).find(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;).value();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Lowdb 非常适合 CLI，小型服务器，Electron 应用程序和 npm 软件包。</p>
</blockquote>
<p>它支持Node，浏览器并使用lodash API，因此学习起来非常简单。实际上，如果你知道Lodash，你已经知道如何使用lowdb</p>
<ul>
<li>用法示例<ul>
<li><a href="https://github.com/typicode/lowdb/tree/master/examples#cli" target="_blank" rel="noopener">CLI</a></li>
<li><a href="https://github.com/typicode/lowdb/tree/master/examples#browser" target="_blank" rel="noopener">浏览器</a></li>
<li><a href="https://github.com/typicode/lowdb/tree/master/examples#server" target="_blank" rel="noopener">服务器</a></li>
<li><a href="https://github.com/typicode/lowdb/tree/master/examples#in-memory" target="_blank" rel="noopener">In-memory</a></li>
</ul>
</li>
<li><a href="https://jsfiddle.net/typicode/4kd7xxbu/" target="_blank" rel="noopener">JSFiddle实例</a></li>
</ul>
<p><strong>重要的</strong> lowdb 不支持群集，并且可能存在非常大的JSON文件（~200MB）的问题。</p>
<p>在 <a href="https://unpkg.com/" target="_blank" rel="noopener">unpkg</a> 上也可以使用UMD构建进行测试和快速原型设计：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://unpkg.com/lodash@4/lodash.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/lowdb@0.17/dist/low.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/lowdb@0.17/dist/LocalStorage.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> adapter = <span class="keyword">new</span> LocalStorage(<span class="string">'db'</span>)</span><br><span class="line">  <span class="keyword">var</span> db = low(adapter)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>1.low(adapter)<br>返回具有下面描述的其他属性和函数的lodash <a href="https://lodash.com/docs/4.17.4#chain" target="_blank" rel="noopener">链</a></p>
<p>2.db.[…].write() db.[…].value()<br><code>write()</code> 是一个语法糖，用于调用 <code>value()</code> 和 <code>db.write()</code> 一行。<br>另一方面，<code>value()</code> 只是 <a href="https://lodash.com/docs/4.17.4#prototype-value" target="_blank" rel="noopener">_.protoype.value()</a> 并且应该用于执行不更改数据库状态的链。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.set(<span class="string">'user.name'</span>, <span class="string">'typicode'</span>).write()</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">db.set(<span class="string">'user.name'</span>, <span class="string">'typicode'</span>).value()</span><br><span class="line">db.write()</span><br></pre></td></tr></table></figure></p>
<p>3.db._<br>数据库lodash实例。使用它来添加自己的实用程序函数或第三方mixins，如 <a href="https://github.com/documentcloud/underscore-contrib" target="_blank" rel="noopener">underscore-contrib</a> 或 <a href="https://github.com/typicode/lodash-id" target="_blank" rel="noopener">lodash-id</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db._.mixin(&#123;</span><br><span class="line">    second: <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">db.get(<span class="string">'posts'</span>).second().value()</span><br></pre></td></tr></table></figure></p>
<p>4.db.getState()<br>返回数据库状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getState() <span class="comment">// &#123;posts:[...]&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>5.db.setState(nweState)<br>替换数据库状态 db.json 内容没变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newState = &#123;&#125;</span><br><span class="line">db.setState(newState)</span><br></pre></td></tr></table></figure></p>
<p>6.db.write()<br>使用持久化数据库adapter.write（取决于adapter，可能会返回一个promise）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 lowdb/adapter/FileSync  同步</span></span><br><span class="line">db.write()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state has been saved'</span>); <span class="comment">// 状态已保存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lowdb/adapter/FileAsync</span></span><br><span class="line">db.write().then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'state has been saved'</span>))</span><br></pre></td></tr></table></figure></p>
<p>7.db.read()<br>使用storage.read选项读取源代码（取决于adapter，可能会返回一个promise）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 lowdb/FileSync</span></span><br><span class="line">db.read()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'State has been updated'</span>) <span class="comment">// 状态已更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 lowdb/FileAsync</span></span><br><span class="line">db.read().then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'State has been updated'</span>))</span><br></pre></td></tr></table></figure></p>
<h2 id="apapter-API"><a href="#apapter-API" class="headerlink" title="apapter API"></a>apapter API</h2><p>请注意，这仅适用于与Lowdb捆绑在一起的适配器。第三方适配器可能有不同的选项。</p>
<p>为了方便，<code>FileSync</code>，<code>FileAsync</code> 和 <code>LocalBrowser</code> 接受以下选项：</p>
<ul>
<li>defaultValue 如果文件不存在，则该值将被用于设定初始状态（default：<code>{}</code>）</li>
<li>serialize/deserialize 在写入之前和读取之后使用的函数（default：<code>JSON.stringify</code> 和 <code>JSON.parse</code> ） 序列化/反序列化<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> FileSync(<span class="string">'array.yaml'</span>, &#123;</span><br><span class="line">  defaultValue: [],</span><br><span class="line">  serialize: <span class="function">(<span class="params">array</span>) =&gt;</span> toYamlString(array),</span><br><span class="line">  deserialize: <span class="function">(<span class="params">string</span>) =&gt;</span> fromYamlString(string)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h2><p>使用Lowdb，您可以访问整个lodash API，因此有很多方法来查询和操作数据</p>
<p>请注意，数据是通过引用返回的，这意味着对返回对象的修改可能会更改数据库。为了避免这种行为，您需要使用.cloneDeep().</p>
<p>此外，方法的执行是懒惰的，也就是说，延迟执行直到调用value()或.write()</p>
<h3 id="检查posts是否存在"><a href="#检查posts是否存在" class="headerlink" title="检查posts是否存在"></a>检查posts是否存在</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.has(<span class="string">'posts'</span>).value()</span><br></pre></td></tr></table></figure>
<h3 id="设置posts"><a href="#设置posts" class="headerlink" title="设置posts"></a>设置posts</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.set(<span class="string">'posts'</span>, []).write()</span><br></pre></td></tr></table></figure>
<h3 id="排序前五个-posts-文章"><a href="#排序前五个-posts-文章" class="headerlink" title="排序前五个 posts (文章)"></a>排序前五个 posts (文章)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">	.filter(&#123;<span class="attr">published</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">	.sortBy(<span class="string">'views'</span>)</span><br><span class="line">	.task(<span class="number">5</span>)</span><br><span class="line">	.value()</span><br></pre></td></tr></table></figure>
<h3 id="获取文章标题"><a href="#获取文章标题" class="headerlink" title="获取文章标题"></a>获取文章标题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts)</span></span><br><span class="line"><span class="string">	.map('</span>title<span class="string">')</span></span><br><span class="line"><span class="string">	.value()</span></span><br></pre></td></tr></table></figure>
<h3 id="获取文章数量"><a href="#获取文章数量" class="headerlink" title="获取文章数量"></a>获取文章数量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">	.size()</span><br><span class="line">	.value()</span><br></pre></td></tr></table></figure>
<h3 id="使用路径获取第一篇文章的标题。"><a href="#使用路径获取第一篇文章的标题。" class="headerlink" title="使用路径获取第一篇文章的标题。"></a>使用路径获取第一篇文章的标题。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts[0].title'</span>)</span><br><span class="line">	.value()</span><br></pre></td></tr></table></figure>
<h3 id="更新一个post"><a href="#更新一个post" class="headerlink" title="更新一个post"></a>更新一个post</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">	.find(&#123;<span class="attr">title</span>: <span class="string">'low!'</span>&#125;)</span><br><span class="line">	.assign(&#123;<span class="attr">title</span>: <span class="string">'hi!'</span>&#125;)</span><br><span class="line">	.write()</span><br></pre></td></tr></table></figure>
<h3 id="删除-posts"><a href="#删除-posts" class="headerlink" title="删除 posts"></a>删除 posts</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">	.remove(&#123;<span class="attr">title</span>: <span class="string">'low!'</span>&#125;)</span><br><span class="line">	.write()</span><br></pre></td></tr></table></figure>
<h3 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.unset(<span class="string">'user.name'</span>)</span><br><span class="line">	.write()</span><br></pre></td></tr></table></figure>
<h3 id="深克隆-posts"><a href="#深克隆-posts" class="headerlink" title="深克隆 posts"></a>深克隆 posts</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.get(<span class="string">'posts'</span>)</span><br><span class="line">	.cloneDeep()</span><br><span class="line">	.value()</span><br></pre></td></tr></table></figure>
<h2 id="如何使用基于id的资源"><a href="#如何使用基于id的资源" class="headerlink" title="如何使用基于id的资源"></a>如何使用基于id的资源</h2><p>能够使用id获取数据非常有用，尤其是在服务器中。要向lowdb添加基于id的资源支持，您有2个选项</p>
<ol>
<li><a href="https://github.com/dylang/shortid" target="_blank" rel="noopener">shortid</a> 更简约，并返回一个可在创建资源时使用的唯一ID。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shortid = <span class="built_in">require</span>(<span class="string">'shortid'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postId = db</span><br><span class="line"> .get(<span class="string">'posts'</span>)</span><br><span class="line"> .push(&#123; <span class="attr">id</span>: shortid.generate(), <span class="attr">title</span>: <span class="string">'low!'</span> &#125;)</span><br><span class="line"> .write()</span><br><span class="line"> .id</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> post = db</span><br><span class="line"> .get(<span class="string">'posts'</span>)</span><br><span class="line"> .find(&#123; <span class="attr">id</span>: postId &#125;)</span><br><span class="line"> .value()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><a href="https://github.com/typicode/lodash-id" target="_blank" rel="noopener">lodash-id</a> 提供了一组帮助程序，用于创建和操作基于id的资源。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lodashId = <span class="built_in">require</span>(<span class="string">'lodash-id'</span>)</span><br><span class="line"><span class="keyword">const</span> db = low(<span class="string">'db.json'</span>)</span><br><span class="line"></span><br><span class="line">db._.mixin(lodashId)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> post = db</span><br><span class="line"> .get(<span class="string">'posts'</span>)</span><br><span class="line"> .insert(&#123; <span class="attr">title</span>: <span class="string">'low!'</span> &#125;)</span><br><span class="line"> .write()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> post = db</span><br><span class="line"> .get(<span class="string">'posts'</span>)</span><br><span class="line"> .getById(post.id)</span><br><span class="line"> .value(</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="如何创建自定义的适配器"><a href="#如何创建自定义的适配器" class="headerlink" title="如何创建自定义的适配器"></a>如何创建自定义的适配器</h2><p><code>low()</code> 接受自定义适配器，因此您可以使用任何格式将数据虚拟地保存到任何存储。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>   </span>&#123; </span><br><span class="line">  <span class="keyword">constructor</span> （） &#123; </span><br><span class="line">    <span class="comment">//  ...</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  read （） &#123; </span><br><span class="line">    <span class="comment">//  应返回数据（对象或数组）或Promise</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  write(data)&#123; </span><br><span class="line">    <span class="comment">//  不应该返回任何内容或Promise</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> MyStorage（ args ）    </span><br><span class="line"><span class="keyword">const</span> db = low （）</span><br></pre></td></tr></table></figure></p>
<p>See <a href="https://github.com/typicode/lowdb/blob/HEAD/src/adapters" target="_blank" rel="noopener">src/adapters</a> for examples. 查看例子</p>
<h2 id="如何加密数据"><a href="#如何加密数据" class="headerlink" title="如何加密数据"></a>如何加密数据</h2><p><code>FileSync</code>，<code>FileAsync</code> 和 <code>LocalStorage</code> 接受自定义 <code>serialize</code> 和 <code>deserialize</code> 功能。您可以使用它们来添加加密逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> FileSync(<span class="string">'db.json'</span>, &#123;</span><br><span class="line">  serialize: <span class="function">(<span class="params">data</span>) =&gt;</span> encrypt(<span class="built_in">JSON</span>.stringify(data))  <span class="comment">// 加密</span></span><br><span class="line">  deserialize: <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">JSON</span>.parse(decrypt(data))  <span class="comment">// 解密</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NPM 源地址 ： &lt;a href=&quot;https://www.npmjs.com/package/lowdb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/package/lowdb&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用于Node，Electron和浏览器的小型JSON数据库。由Lodash提供技术支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db.get(&lt;span class=&quot;string&quot;&gt;&#39;posts&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .push(&amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;lowdb is awesome&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .write()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install lowdb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; low = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;lowdb&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; FileSync = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;lowdb/adapters/FileSync&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; adapter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileSync(&lt;span class=&quot;string&quot;&gt;&#39;db.json&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 存储到db.json文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; db = low(adapter);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置一些默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.defaults(&amp;#123;&lt;span class=&quot;attr&quot;&gt;posts&lt;/span&gt;: [], &lt;span class=&quot;attr&quot;&gt;user&lt;/span&gt;: &amp;#123;&amp;#125;&amp;#125;).write();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 添加一个post&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.get(&lt;span class=&quot;string&quot;&gt;&#39;posts&#39;&lt;/span&gt;).push(&amp;#123;&lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;lowdb is awesome&#39;&lt;/span&gt;&amp;#125;).write();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用Lodash简写语法设置用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.set(&lt;span class=&quot;string&quot;&gt;&#39;user.name&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;typicode&#39;&lt;/span&gt;).write();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据保存到db.json&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;posts&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;lowdb is awesome&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;typicode&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以使用任何 &lt;a href=&quot;https://lodash.com/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lodash&lt;/a&gt; 函数 &lt;a href=&quot;https://lodash.com/docs#get&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;_.get&lt;/a&gt; 和 &lt;a href=&quot;https://lodash.com/docs#find&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;_.find&lt;/a&gt; 简写语法&lt;/p&gt;
    
    </summary>
    
    
      <category term="lowdb" scheme="https://shizhonghai.github.io/tags/lowdb/"/>
    
  </entry>
  
  <entry>
    <title>关于 GitHub 相关技巧</title>
    <link href="https://shizhonghai.github.io/2020/01/15/github/"/>
    <id>https://shizhonghai.github.io/2020/01/15/github/</id>
    <published>2020-01-14T16:00:00.000Z</published>
    <updated>2020-01-15T08:59:50.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="显示-GitHub-Stars-数量-官方文档地址：https-shields-io"><a href="#显示-GitHub-Stars-数量-官方文档地址：https-shields-io" class="headerlink" title="显示 GitHub Stars 数量 (官方文档地址：https://shields.io/)"></a>显示 GitHub Stars 数量 (官方文档地址：<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a>)</h2><p><a href="https://github.com/louzhedong/blog/stargazers" target="_blank" rel="noopener"><img src="https://img.shields.io/github/stars/louzhedong/blog.svg?style=social" alt="GitHub stars"></a></p>
<p><a href="https://github.com/shizhonghai/shizhonghai.github.io/stargazers" target="_blank" rel="noopener"><img src="https://img.shields.io/github/stars/shizhonghai/shizhonghai.github.io?style=social" alt="GitHub stars"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;显示-GitHub-Stars-数量-官方文档地址：https-shields-io&quot;&gt;&lt;a href=&quot;#显示-GitHub-Stars-数量-官方文档地址：https-shields-io&quot; class=&quot;headerlink&quot; title=&quot;显示 GitHu
    
    </summary>
    
    
      <category term="Github" scheme="https://shizhonghai.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>git 忽略规则以及 .gitignore 文件不生效解决办法</title>
    <link href="https://shizhonghai.github.io/2020/01/07/gitignore/"/>
    <id>https://shizhonghai.github.io/2020/01/07/gitignore/</id>
    <published>2020-01-06T16:00:00.000Z</published>
    <updated>2020-01-07T07:50:49.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-忽略规则"><a href="#Git-忽略规则" class="headerlink" title="Git 忽略规则"></a>Git 忽略规则</h2><p>#此为注释 – 内容被 Git 忽略</p>
<ul>
<li>.sample 　　    # 忽略所有 .sample 结尾的文件</li>
<li>!lib.sample 　　# 但 lib.sample 除外</li>
<li>/TODO 　　      # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</li>
<li>build/ 　　     # 忽略 build/ 目录下的所有文件</li>
<li>doc/.txt 　　   # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</li>
</ul>
<h2 id="gitignore-规则不生效的解决办法"><a href="#gitignore-规则不生效的解决办法" class="headerlink" title=".gitignore 规则不生效的解决办法"></a>.gitignore 规则不生效的解决办法</h2><p>把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -rf --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;update .gitignore&apos;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-忽略规则&quot;&gt;&lt;a href=&quot;#Git-忽略规则&quot; class=&quot;headerlink&quot; title=&quot;Git 忽略规则&quot;&gt;&lt;/a&gt;Git 忽略规则&lt;/h2&gt;&lt;p&gt;#此为注释 – 内容被 Git 忽略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.sample 　　    
    
    </summary>
    
    
      <category term="git" scheme="https://shizhonghai.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>每日一题（2019-10-29）</title>
    <link href="https://shizhonghai.github.io/2019/12/12/Daily-Interview-Question-2/"/>
    <id>https://shizhonghai.github.io/2019/12/12/Daily-Interview-Question-2/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2019-12-12T02:06:34.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-0002-题：Vue-中的-computed-和-watch-的区别在哪里"><a href="#第-0002-题：Vue-中的-computed-和-watch-的区别在哪里" class="headerlink" title="第 0002 题：Vue 中的 computed 和 watch 的区别在哪里"></a>第 0002 题：Vue 中的 computed 和 watch 的区别在哪里</h2><p><code>computed</code>：计算属性</p>
<ul>
<li>计算属性是由 <code>data</code> 中的已知值，得到的一个新值。</li>
<li>这个新值只会根据已知值的变化而变化，其他不相关的数据的变化不会影响该新值。</li>
<li>计算属性不在 <code>data</code> 中，计算属性新值的相关已知值在 <code>data</code> 中。</li>
<li>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数。</li>
<li>别人变化影响我自己。</li>
</ul>
<p><code>watch</code>：监听数据的变化</p>
<ul>
<li>监听data中数据的变化。</li>
<li>监听的数据就是data中的已知值。</li>
<li>无缓存性，页面重新渲染时值不变化也会执行。</li>
<li>我的变化影响别人。</li>
</ul>
<p>公司：虾皮</p>
<blockquote>
<ol>
<li><code>watch</code> 擅长处理的场景：一个数据影响多个数据</li>
<li><code>computed</code> 擅长处理的场景：一个数据受多个数据影响</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第-0002-题：Vue-中的-computed-和-watch-的区别在哪里&quot;&gt;&lt;a href=&quot;#第-0002-题：Vue-中的-computed-和-watch-的区别在哪里&quot; class=&quot;headerlink&quot; title=&quot;第 0002 题：Vue 中
    
    </summary>
    
    
      <category term="每日一题" scheme="https://shizhonghai.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>每日一题（2019-11-01）</title>
    <link href="https://shizhonghai.github.io/2019/12/12/Daily-Interview-Question-3/"/>
    <id>https://shizhonghai.github.io/2019/12/12/Daily-Interview-Question-3/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2019-12-12T06:35:13.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-0003-题：webpack-中-loader-和-plugin-的区别是什么"><a href="#第-0003-题：webpack-中-loader-和-plugin-的区别是什么" class="headerlink" title="第 0003 题：webpack 中 loader 和 plugin 的区别是什么"></a>第 0003 题：webpack 中 loader 和 plugin 的区别是什么</h2><p><code>loader</code> 它是一个转换器，将 A 文件进行编译成 B 文件，比如：将 A.less 转换为 A.css，单纯的文件转换过程。<br><code>plugin</code> 是一个扩展器，它丰富了 <code>webpack</code> 本身，针对是 <code>loader</code> 结束后，<code>webpack</code> 打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听 <code>webpack</code> 打包过程中的某些节点，执行广泛的任务</p>
<p>公司：平安</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第-0003-题：webpack-中-loader-和-plugin-的区别是什么&quot;&gt;&lt;a href=&quot;#第-0003-题：webpack-中-loader-和-plugin-的区别是什么&quot; class=&quot;headerlink&quot; title=&quot;第 0003 题：w
    
    </summary>
    
    
      <category term="每日一题" scheme="https://shizhonghai.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>解决 Hexo Cannot find module &#39;./build/Release/DTraceProviderBindings&#39; 错误</title>
    <link href="https://shizhonghai.github.io/2019/12/12/hexo-error-DTraceProviderBindings/"/>
    <id>https://shizhonghai.github.io/2019/12/12/hexo-error-DTraceProviderBindings/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2019-12-12T06:59:06.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-报错"><a href="#hexo-报错" class="headerlink" title="hexo 报错"></a>hexo 报错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</span><br></pre></td></tr></table></figure>
<h2 id="解决办法-on-google"><a href="#解决办法-on-google" class="headerlink" title="解决办法 on google"></a>解决办法 on google</h2><p>google之后发现被这个问题困扰的小伙伴还真不少，网上最靠谱的解决办法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure>
<p>的确很多小伙伴执行上面的命令之后都解决了报错的问题，但也有很多小伙伴跟我一样执行后没有任何效果，我甚至尝试了卸载后重装的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo</span><br><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure>
<p>可是依旧没有效果。<br>其实 hexo 暂时并没有用到 <code>dtrace-prodider</code> ，仅仅是报错而已，hexo 的命令还是能执行，但对于强迫症来说，简直无法忍受。</p>
<p>我的解决办法<br>一番折腾之后，我找到了适合我的解决办法，重装 <code>hexo-cli</code>，如果命令行报没权限错误，请记得前面加 <code>sudo</code> :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-cli -g</span><br><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>再来执行 hexo 命令果然没有报错信息了:D</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo-报错&quot;&gt;&lt;a href=&quot;#hexo-报错&quot; class=&quot;headerlink&quot; title=&quot;hexo 报错&quot;&gt;&lt;/a&gt;hexo 报错&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
    
      <category term="hexo" scheme="https://shizhonghai.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>自定义 Echarts 图表悬浮框的位置</title>
    <link href="https://shizhonghai.github.io/2019/08/12/echarts-tooltip/"/>
    <id>https://shizhonghai.github.io/2019/08/12/echarts-tooltip/</id>
    <published>2019-08-11T16:00:00.000Z</published>
    <updated>2019-08-12T09:54:08.811Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目需求，悬浮框内容较多，会出现悬浮框(tooltip)很长或者很宽的现象，而太长了，就会被 Echarts 溢出隐藏了，所以需要自定义定位需求</p>
<blockquote>
<p>需求描述：鼠标悬浮在左侧某一个点时，悬浮框悬停在点的右侧；鼠标悬停在右侧某一个点时，悬浮框悬停在点的左侧。</p>
</blockquote>
<p>首先明确一点，我们需要借助 <code>tooltip.position</code> 属性。理想的思路是我们在回调函数中获取鼠标每次悬停的坐标，然后再判断这个坐标是否处于此容器(也就是这个Echarts图表)的左侧或者右侧；判断命中后我们再改变 <code>tooltip</code> 的位置，并返回给函数。</p>
<a id="more"></a>
<p>效果图：【左侧悬浮】<br><img src="/images/echart_01@2x.png" alt="左侧悬浮"></p>
<p>效果图：【右侧悬浮】<br><img src="/images/echart_02@2x.png" alt="左侧悬浮"></p>
<p>效果图：【溢出显示】<br><img src="/images/echart_03@2x.png" alt="溢出显示"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关健代码</span></span><br><span class="line">tooltip: &#123;</span><br><span class="line">    position: <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'chartDom'</span>);</span><br><span class="line">        <span class="keyword">if</span> (dom) &#123;</span><br><span class="line">            <span class="comment">// 获取容器的宽度</span></span><br><span class="line">            <span class="keyword">let</span> chartsWidth = dom.offsetWidth;</span><br><span class="line">            <span class="comment">// 判断悬停点落在容器的哪测</span></span><br><span class="line">            <span class="keyword">if</span> (position[<span class="number">0</span>] &lt; (chartsWidth / <span class="number">2</span>)) &#123;</span><br><span class="line">                position[<span class="number">0</span>] = position[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                position[<span class="number">0</span>] = position[<span class="number">0</span>] - <span class="number">130</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [position[<span class="number">0</span>], position[<span class="number">1</span>]];</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目需求，悬浮框内容较多，会出现悬浮框(tooltip)很长或者很宽的现象，而太长了，就会被 Echarts 溢出隐藏了，所以需要自定义定位需求&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需求描述：鼠标悬浮在左侧某一个点时，悬浮框悬停在点的右侧；鼠标悬停在右侧某一个点时，悬浮框悬停在点的左侧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先明确一点，我们需要借助 &lt;code&gt;tooltip.position&lt;/code&gt; 属性。理想的思路是我们在回调函数中获取鼠标每次悬停的坐标，然后再判断这个坐标是否处于此容器(也就是这个Echarts图表)的左侧或者右侧；判断命中后我们再改变 &lt;code&gt;tooltip&lt;/code&gt; 的位置，并返回给函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Echarts" scheme="https://shizhonghai.github.io/tags/Echarts/"/>
    
  </entry>
  
  <entry>
    <title>React 生命周期</title>
    <link href="https://shizhonghai.github.io/2019/08/02/react-component/"/>
    <id>https://shizhonghai.github.io/2019/08/02/react-component/</id>
    <published>2019-08-01T16:00:00.000Z</published>
    <updated>2019-08-02T03:05:34.171Z</updated>
    
    <content type="html"><![CDATA[<p>防止自己忘掉 <code>React</code> 的一些生命周期方法，方便自己回忆和查阅。</p>
<h2 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a><code>componentDidUpdate()</code></h2><blockquote>
<p><code>componentDidUpdate(prevProps, prevState, snapshot)</code></p>
</blockquote>
<p><code>componentDidUpdate()</code> 会在更新后会被立即调用。首次渲染不会执行此方法。</p>
<p>当组件更新后，可以在此处对 DOM 进行操作。如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求。（例如，当 props 未发生变化时，则不会执行网络请求）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps) &#123;</span><br><span class="line">  <span class="comment">// 典型用法（不要忘记比较 props）：</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.props.userID !== prevProps.userID) &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData(<span class="keyword">this</span>.props.userID);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你也可以在 <code>componentDidUpdate()</code> 中直接调用 <code>setState()</code>，但请注意它必须被包裹在一个条件语件里，正如上述的例子那样进行处理，否则会导致死循环。它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。不要将 <code>props</code> “镜像”给 <code>state</code>，请考虑直接使用 <code>props</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防止自己忘掉 &lt;code&gt;React&lt;/code&gt; 的一些生命周期方法，方便自己回忆和查阅。&lt;/p&gt;
&lt;h2 id=&quot;componentDidUpdate&quot;&gt;&lt;a href=&quot;#componentDidUpdate&quot; class=&quot;headerlink&quot; title=&quot;co
    
    </summary>
    
    
      <category term="React" scheme="https://shizhonghai.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>CSS 技巧</title>
    <link href="https://shizhonghai.github.io/2019/07/26/CSS-skill/"/>
    <id>https://shizhonghai.github.io/2019/07/26/CSS-skill/</id>
    <published>2019-07-25T16:00:00.000Z</published>
    <updated>2019-08-02T02:59:15.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="padding-配合-background-clip-属性，可以制作一些特殊形状："><a href="#padding-配合-background-clip-属性，可以制作一些特殊形状：" class="headerlink" title="padding 配合 background-clip 属性，可以制作一些特殊形状："></a><code>padding</code> 配合 <code>background-clip</code> 属性，可以制作一些特殊形状：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*三道杠*/</span></span><br><span class="line"><span class="selector-class">.icon1</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">2px</span> solid currentColor;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid currentColor;</span><br><span class="line">  <span class="attribute">background</span>: currentColor; <span class="comment">/*注意如果此处背景颜色属性用缩写的话，需要放到其他背景属性的前面，否则会覆盖前面的属性值（此处为background-clip）为默认值*/</span></span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*双层圆点*/</span></span><br><span class="line"><span class="selector-class">.icon2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid currentColor;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: currentColor;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<style>
.icon1 {
  box-sizing: border-box;
  display: inline-block;
  width: 12px;
  height: 10px;
  padding: 2px 0;
  margin-right: 20px;
  border-top: 2px solid currentColor;
  border-bottom: 2px solid currentColor;
  background: currentColor;
  background-clip: content-box;
}

/*双层圆点*/
.icon2 {
  display: inline-block;
  width: 12px;
  height: 12px;
  padding: 2px;
  border: 2px solid currentColor;
  border-radius: 50%;
  background-color: currentColor;
  background-clip: content-box;
}
</style>

<p>实时预览如下：（<code>currentColor</code> 是 <code>css</code> 中为数不多的变量，指当前文字的颜色值，非常好用）</p>
<div style="text-align: center;"><div class="icon1"></div><div class="icon2"></div></div>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;padding-配合-background-clip-属性，可以制作一些特殊形状：&quot;&gt;&lt;a href=&quot;#padding-配合-background-clip-属性，可以制作一些特殊形状：&quot; class=&quot;headerlink&quot; title=&quot;padding 配合
    
    </summary>
    
    
      <category term="CSS" scheme="https://shizhonghai.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>每日一题（2019-07-18）</title>
    <link href="https://shizhonghai.github.io/2019/07/18/Daily-Interview-Question-1/"/>
    <id>https://shizhonghai.github.io/2019/07/18/Daily-Interview-Question-1/</id>
    <published>2019-07-17T16:00:00.000Z</published>
    <updated>2019-12-12T01:57:24.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-0001-题：请写出如下代码的打印结果"><a href="#第-0001-题：请写出如下代码的打印结果" class="headerlink" title="第 0001 题：请写出如下代码的打印结果"></a>第 0001 题：请写出如下代码的打印结果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Tom'</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">'Jack'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Goodbye '</span> + name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>公司：京东</p>
<a id="more"></a>
<blockquote>
<p>【答案】：<code>Goodbye Jack</code><br>  【解析】：<code>var</code> 关键字有变量提升，它定义的变量会提升到函数的顶部。题目中立即执行函数的中的变量 <code>name</code> 的定义被提升到了顶部，并在初始化赋值之前是 <code>undefined</code>，所以 <code>typeof name == &#39;undefined</code>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第-0001-题：请写出如下代码的打印结果&quot;&gt;&lt;a href=&quot;#第-0001-题：请写出如下代码的打印结果&quot; class=&quot;headerlink&quot; title=&quot;第 0001 题：请写出如下代码的打印结果&quot;&gt;&lt;/a&gt;第 0001 题：请写出如下代码的打印结果&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;Tom&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; name == &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Goodbye &#39;&lt;/span&gt; + name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; + name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;公司：京东&lt;/p&gt;
    
    </summary>
    
    
      <category term="每日一题" scheme="https://shizhonghai.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 名词解释</title>
    <link href="https://shizhonghai.github.io/2019/07/18/javascript-glossary/"/>
    <id>https://shizhonghai.github.io/2019/07/18/javascript-glossary/</id>
    <published>2019-07-17T16:00:00.000Z</published>
    <updated>2019-07-18T02:19:20.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量提升（hoisting）"><a href="#变量提升（hoisting）" class="headerlink" title="变量提升（hoisting）"></a>变量提升（hoisting）</h2><p><code>var</code> 命令会发生“变量提升”现象，即变量可以在声明之前使用，值为<code>undefined</code></p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量提升（hoisting）&quot;&gt;&lt;a href=&quot;#变量提升（hoisting）&quot; class=&quot;headerlink&quot; title=&quot;变量提升（hoisting）&quot;&gt;&lt;/a&gt;变量提升（hoisting）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt; 命令会发生“变量提升”现象，即变量可以在声明之前使用，值为&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://shizhonghai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>可能是你需要的 react + typescript 50条规范和经验</title>
    <link href="https://shizhonghai.github.io/2019/07/11/react-typescript/"/>
    <id>https://shizhonghai.github.io/2019/07/11/react-typescript/</id>
    <published>2019-07-10T16:00:00.000Z</published>
    <updated>2019-07-11T09:48:48.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="文件顶部的注释，包括描述、作者、日期"><a href="#文件顶部的注释，包括描述、作者、日期" class="headerlink" title="文件顶部的注释，包括描述、作者、日期"></a>文件顶部的注释，包括描述、作者、日期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description xxxxxx</span></span><br><span class="line"><span class="comment"> * @author chengfeng</span></span><br><span class="line"><span class="comment"> * @since 19/05/21</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="模块的注释"><a href="#模块的注释" class="headerlink" title="模块的注释"></a>模块的注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝数据</span></span><br><span class="line"><span class="comment"> * @param  &#123;*&#125;  data   要拷贝的源数据</span></span><br><span class="line"><span class="comment"> * @param  &#123;boolean&#125; [isDeep=false] 是否深拷贝，默认浅拷贝</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;         返回拷贝后的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="业务代码注释"><a href="#业务代码注释" class="headerlink" title="业务代码注释"></a>业务代码注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*业务代码注释*/</span></span><br></pre></td></tr></table></figure>
<h3 id="变量注释"><a href="#变量注释" class="headerlink" title="变量注释"></a>变量注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  <span class="comment">// 名字</span></span><br><span class="line">  name: string;</span><br><span class="line">  <span class="comment">// 电话</span></span><br><span class="line">  phone: number;</span><br><span class="line">  <span class="comment">// 地址</span></span><br><span class="line">  address: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="引用组件顺序"><a href="#引用组件顺序" class="headerlink" title="引用组件顺序"></a>引用组件顺序</h2><ul>
<li>先引用外部组件库,,再引用当前组件块级组件, 然后是 common 里的公共函数库最后是 css 样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dropdown, Menu, Icon &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./Header'</span>;</span><br><span class="line"><span class="keyword">import</span> toast <span class="keyword">from</span> <span class="string">'common/toast'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><ul>
<li>使用单引号,或者 es6 的反引号</li>
</ul>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><ul>
<li>使用两个空格</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleCheck = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  onCancel &amp;&amp; onCancel();</span><br><span class="line">  onClose &amp;&amp; onClose();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><ul>
<li>每行末尾都要加分号。</li>
</ul>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>do</code>, <code>switch</code>, <code>try</code>, <code>catch</code>, <code>finally</code>, <code>with</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// not good</span></span><br><span class="line"><span class="keyword">if</span> (condition) doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul>
<li>二元和三元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">++ x;</span><br><span class="line">y ++;</span><br><span class="line">z = x?<span class="number">1</span>:<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">++x;</span><br><span class="line">y++;</span><br><span class="line">z = x ? <span class="number">1</span> : <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>用作代码块起始的左花括号 { 前必须有一个空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>if</code> / <code>else</code> / <code>for</code> / <code>while</code> / <code>function</code> / <code>switch</code> / <code>do</code> / <code>try</code> / <code>catch</code> / <code>finally</code> 关键字后，必须有一个空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<ul>
<li>在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c :<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ul>
<li>每个独立语句结束后必须换行。</li>
<li>在函数声明、函数表达式、函数调用、对象创建、数组创建、for 语句等场景中，不允许在 , 或 ; 前换行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">    , <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">    , <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> object)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span> (object.hasOwnProperty(key)) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = object[key];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> object) &#123;</span><br><span class="line">  <span class="keyword">if</span> (object.hasOwnProperty(key)) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = object[key];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>下列关键字后：else, catch, finally 不需要换行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组、对象"><a href="#数组、对象" class="headerlink" title="数组、对象"></a>数组、对象</h2><ul>
<li>对象属性名不需要加引号；</li>
<li>对象以缩进的形式书写，不要写在一行；</li>
<li>数组最后不要有逗号。</li>
<li>对象最后要有逗号。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    <span class="string">'b'</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul>
<li>类名: 大驼峰式风格，字母和数字，例如：AbcTest。禁止汉字、特殊符号，禁止非大驼峰式风格。</li>
<li>函数名: 小驼峰式风格，字母和数字，例如：abcTest。禁止汉字、特殊符号，禁止非小驼峰式风格，例如snake_case等。</li>
<li>变量名: 同函数名。</li>
<li>常量: 全大写风格，大写字母、数字和下划线，单词之间以下划线分隔，例如：ABC_TEST。禁止汉字、特殊符号、小写字母。</li>
<li>使用 onXxx 形式作为 props 中用于回调的属性名称。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  onClose?: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  onOk?: <span class="function">(<span class="params">item: Record&lt;string, any&gt;</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>组件内的事件函数使用 handle 开头尾,handleCheckBtn。</li>
<li>使用 withXxx 形式的词作为高阶组件的名称。</li>
<li>接口命名前面带上 I 表示 interface</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;&#125;</span><br><span class="line">interface IState &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (something.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> something.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="interface声明顺序"><a href="#interface声明顺序" class="headerlink" title="interface声明顺序"></a>interface声明顺序</h2><p>日常用到比较多的是四种，只读参数放第一位，必选参数第二位，可选参数次之，不确定参数放最后<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iProps &#123;</span><br><span class="line">  readonly x: <span class="built_in">number</span>;</span><br><span class="line">  readonly y: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  height?: <span class="built_in">number</span>;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ts好用的相关工具泛型"><a href="#ts好用的相关工具泛型" class="headerlink" title="ts好用的相关工具泛型"></a>ts好用的相关工具泛型</h2><ul>
<li><code>Record&lt;string,any&gt;</code> 用这个来声明对象结构的类型</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于定义一个javascript的对象，key是字符串，value是任意类型</span></span><br><span class="line"><span class="keyword">const</span> people:Record&lt;<span class="built_in">string</span>,<span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">    name: <span class="string">'chengfeng'</span>,</span><br><span class="line">    age: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Partial</code> 作用是将传入的属性变为可选项.</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iPeople &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people: Partial&lt;Todo&gt; = &#123;</span><br><span class="line">    title: <span class="string">'Delete inactive users'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">定义的结构可以是接口iPeople的任意key</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Readonly</code> 作用是将传入的属性变为变成只读</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iPeople &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people: Readonly&lt;Todo&gt; = &#123;</span><br><span class="line">    title: <span class="string">'todo list'</span>,</span><br><span class="line">    name: <span class="string">'chenfeng'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">title name属性就是只读的了</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Required</code> 的作用是将传入的属性变为必选项</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iPeople &#123;</span><br><span class="line">    title?: <span class="built_in">string</span>;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> people1: Props = &#123; title: <span class="string">'ts'</span> &#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> people22: Required&lt;iPeople&gt; = &#123; title: <span class="string">'ts'</span> &#125;; <span class="comment">// Error: property 'name' missing</span></span><br></pre></td></tr></table></figure>
<h2 id="ts一些好用的小tips"><a href="#ts一些好用的小tips" class="headerlink" title="ts一些好用的小tips"></a>ts一些好用的小tips</h2><ul>
<li><code>keyof</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> iPeople &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T = keyof iPeople <span class="comment">// -&gt; "name" | "age"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>in</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Keys = <span class="string">"a"</span> | <span class="string">"b"</span></span><br><span class="line"><span class="keyword">type</span> Obj =  &#123;</span><br><span class="line">  [p <span class="keyword">in</span> Keys]: <span class="built_in">any</span></span><br><span class="line">&#125; <span class="comment">// -&gt; &#123; a: any, b: any &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="规范其他"><a href="#规范其他" class="headerlink" title="规范其他"></a>规范其他</h2><ul>
<li>不要使用 var 声明变量</li>
<li>不会被修改的变量使用 const 声明</li>
<li>去除声明但未被引用的代码</li>
<li>禁止在代码里使用 debug</li>
<li>不允许有空的代码块</li>
</ul>
<h2 id="仅当初始-state-需要从-props-计算得到的时候，才将-state-的声明放在构造函数中，其它情况下使用静态属性声明-state-并且一般情况下不要将-prop-传给-state，"><a href="#仅当初始-state-需要从-props-计算得到的时候，才将-state-的声明放在构造函数中，其它情况下使用静态属性声明-state-并且一般情况下不要将-prop-传给-state，" class="headerlink" title="仅当初始 state 需要从 props 计算得到的时候，才将 state 的声明放在构造函数中，其它情况下使用静态属性声明 state,并且一般情况下不要将 prop 传给 state，"></a>仅当初始 state 需要从 props 计算得到的时候，才将 state 的声明放在构造函数中，其它情况下使用静态属性声明 state,并且一般情况下不要将 prop 传给 state，</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">constructor</span> ()&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; people: <span class="keyword">this</span>.props.people &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">state: IState = &#123;</span><br><span class="line">  people: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="渲染默认值"><a href="#渲染默认值" class="headerlink" title="渲染默认值"></a>渲染默认值</h2><ul>
<li>添加非空判断可以提高代码的稳健性,例如后端返回的一些值,可能会出现不存在的情况，应该要给默认值.</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">render()&#123;</span><br><span class="line">  &#123;name&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">render()&#123;</span><br><span class="line">  &#123;name || <span class="string">''</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>还有一种情况，就是本来后端应该返回一个数组给你，但是数据库取不到数据，可能后端给你返回了null,然后前端null.length。这样就gg了</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> &#123; list, totalCount &#125; = await getPeopleList(keyword, page, pageSize);</span><br><span class="line">list 可能是<span class="literal">null</span>或者<span class="literal">undefined</span></span><br><span class="line">list.length将直接导致前端报错</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  status: STATUS.READY,</span><br><span class="line">  apps: list,</span><br><span class="line">  total: totalCount,</span><br><span class="line">  page: page,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good </span></span><br><span class="line"><span class="keyword">const</span> &#123; list, totalCount &#125; = await getPeopleList(keyword, page, pageSize);</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  status: STATUS.READY,</span><br><span class="line">  apps: list || [],</span><br><span class="line">  total: totalCount || <span class="number">0</span>,</span><br><span class="line">  page: page,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="不确定的属性，最后却疯狂的用…访问不存在的属性"><a href="#不确定的属性，最后却疯狂的用…访问不存在的属性" class="headerlink" title="不确定的属性，最后却疯狂的用…访问不存在的属性"></a>不确定的属性，最后却疯狂的用…访问不存在的属性</h2><p>例如一些地方，不确定这个变量里面到底有什么，但自己觉得有，就疯狂的…,最明显的就是后端返回了一个对象给你，前端拿到之后判断都不判断直接 <code>data.dataList.forEach()</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> getPeopleList(keyword, page, pageSize);</span><br><span class="line">data.dataList.forEach() <span class="comment">// 直接挂了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> getPeopleList(keyword, page, pageSize);</span><br><span class="line"><span class="keyword">if</span> (data &amp;&amp; data.dataList &amp;&amp; <span class="built_in">Array</span>.isArray(data.dataList) &#123;</span><br><span class="line">    data.dataList.forEach() </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="数据格式转换"><a href="#数据格式转换" class="headerlink" title="数据格式转换"></a>数据格式转换</h2><h3 id="把字符串转整型可以使用-号"><a href="#把字符串转整型可以使用-号" class="headerlink" title="把字符串转整型可以使用 + 号"></a>把字符串转整型可以使用 <code>+</code> 号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> maxPrice = +form.maxPrice.value;</span><br><span class="line"><span class="keyword">let</span> maxPrice = <span class="built_in">Number</span>(form.maxPrice.value);</span><br></pre></td></tr></table></figure>
<h3 id="转成-boolean-值用"><a href="#转成-boolean-值用" class="headerlink" title="转成 boolean 值用 !!"></a>转成 <code>boolean</code> 值用 <code>!!</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mobile = !!ua.match(<span class="regexp">/iPhone|iPad|Android|iPod|Windows Phone/</span>);</span><br></pre></td></tr></table></figure>
<h2 id="判断条件真假"><a href="#判断条件真假" class="headerlink" title="判断条件真假"></a>判断条件真假</h2><p>js 中以下为假,其他情况为真</p>
<ul>
<li>false</li>
<li>null</li>
<li>undefined</li>
<li>0</li>
<li>‘’ (空字符串)</li>
<li>NaN</li>
</ul>
<h2 id="简单组件可以使用函数代替"><a href="#简单组件可以使用函数代替" class="headerlink" title="简单组件可以使用函数代替"></a>简单组件可以使用函数代替</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listing</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.props.hello&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listing</span>(<span class="params">&#123; hello &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;hello&#125;&lt;/div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对于常用的属性进行缓存"><a href="#对于常用的属性进行缓存" class="headerlink" title="对于常用的属性进行缓存"></a>对于常用的属性进行缓存</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.props.app.openid;</span><br><span class="line"><span class="keyword">this</span>.state.time</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="keyword">const</span> &#123; time &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"><span class="built_in">console</span>.log(app.openid)</span><br></pre></td></tr></table></figure>
<h2 id="input-输入框使用-trim"><a href="#input-输入框使用-trim" class="headerlink" title="input 输入框使用 trim()"></a>input 输入框使用 trim()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.props.app.openid;</span><br><span class="line"><span class="keyword">this</span>.state.time</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="keyword">const</span> &#123; time &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"><span class="built_in">console</span>.log(app.openid)</span><br></pre></td></tr></table></figure>
<h2 id="使用-location-跳转前需要先转义"><a href="#使用-location-跳转前需要先转义" class="headerlink" title="使用 location 跳转前需要先转义"></a>使用 location 跳转前需要先转义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">window</span>.location.href = redirectUrl + <span class="string">'?a=10&amp;b=20'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">window</span>.location.href = redirectUrl + <span class="built_in">encodeURIComponent</span>(<span class="string">'?a=10&amp;b=20'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="同时开发，数据请求-api-目录-git-冲突目录方案"><a href="#同时开发，数据请求-api-目录-git-冲突目录方案" class="headerlink" title="同时开发，数据请求 api 目录 git 冲突目录方案"></a>同时开发，数据请求 api 目录 git 冲突目录方案</h2><p>在 api 目录下新建一个目录，目录对应一级 tab,这个目录内放置一个 index.js ，最后把二级 tab 组件所使用的 api 请求都在这个 index.js 内引入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前</span></span><br><span class="line"></span><br><span class="line">|- api</span><br><span class="line">  |- pageA.ts</span><br><span class="line">  |- pageB.ts</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议</span></span><br><span class="line"></span><br><span class="line">|- api</span><br><span class="line">  |- pageA</span><br><span class="line">    |- index.js</span><br><span class="line">    |- aaa.js</span><br><span class="line">    |- bbb.js</span><br><span class="line">  |- pageB</span><br><span class="line">    |- index.js</span><br><span class="line">    |- aaa.js</span><br><span class="line">    |- bbb.js</span><br><span class="line">    |- ccc.js</span><br></pre></td></tr></table></figure></p>
<h2 id="组件嵌套过深"><a href="#组件嵌套过深" class="headerlink" title="组件嵌套过深"></a>组件嵌套过深</h2><p>组件一般不要超过三层,最多四层,层级过深可能会导致数据传递过深，在做一些颗粒度比较细的操作的时候，处理起来较为繁琐，可以使用 redux 等状态管理工具替代。</p>
<h2 id="代码过滤掉你没考虑到的情况"><a href="#代码过滤掉你没考虑到的情况" class="headerlink" title="代码过滤掉你没考虑到的情况"></a>代码过滤掉你没考虑到的情况</h2><p>例如一个函数，你只想操作字符串，那你必须在函数开头就只允许参数是字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params">str:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span>(str) === <span class="string">'string'</span> ) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="业务代码里面的异步请求需要-try-catch"><a href="#业务代码里面的异步请求需要-try-catch" class="headerlink" title="业务代码里面的异步请求需要 try catch"></a>业务代码里面的异步请求需要 try catch</h2><p>ajax 请求，使用 try catch，错误提示后端返回,并且做一些失败后的状态操作例如进入列表页，我们需要一个 loading 状态，然后去请求数据,可是失败之后，也需要把 loading 状态去掉,把 loading 隐藏的代码就写在 finally 里面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">getStudentList = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">true</span>,</span><br><span class="line">      isEmpty: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> getStudentList(&#123;&#125;);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      isEmpty: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//  失败之后的一些兜底操作</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      isEmpty: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="setState有三种用法"><a href="#setState有三种用法" class="headerlink" title="setState有三种用法"></a>setState有三种用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数，一般是用于在setState之前做一些操作</span></span><br><span class="line"><span class="keyword">this</span>.setState(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      a:<span class="number">300</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数，一般是用于在setState之后做一些操作</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  a:<span class="number">300</span></span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="setState可能是同步的"><a href="#setState可能是同步的" class="headerlink" title="setState可能是同步的"></a>setState可能是同步的</h2><ul>
<li>setState 在react里的合成事件和钩子函数中是“异步”的。</li>
<li>setState 在原生事件和 setTimeout 中是同步的。</li>
</ul>
<h2 id="不要在-setState-前面加-await"><a href="#不要在-setState-前面加-await" class="headerlink" title="不要在 setState 前面加 await"></a>不要在 setState 前面加 await</h2><p>setState 前面也是可以带 await 的，会变成同步设置状态,但这是一种巧合，不确定未来哪个版本就不支持了，为了遵循 react 框架的设计原则，我们使用回掉函数的形式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">func = <span class="keyword">async</span> (name, value, status) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">func = <span class="function">(<span class="params">name, value, status</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(</span><br><span class="line">    &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="阻止事件默认行为"><a href="#阻止事件默认行为" class="headerlink" title="阻止事件默认行为"></a>阻止事件默认行为</h2><p>在 React 中你不能通过返回 false 来阻止默认行为。必须明确调用 preventDefault 。</p>
<h2 id="在-componentWillUnmount-里面去除副作用的函数"><a href="#在-componentWillUnmount-里面去除副作用的函数" class="headerlink" title="在 componentWillUnmount 里面去除副作用的函数"></a>在 componentWillUnmount 里面去除副作用的函数</h2><ul>
<li>清除 EventListener</li>
<li>中止数据请求</li>
<li>清除定时器</li>
</ul>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>对于组件中的 key 优化，起到最大化重用 dom</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">this</span>.state.dataAry.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;span key=&#123;index&#125; /&gt;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//good</span><br><span class="line">this.state.dataAry.map(item =&gt; &lt;span key=&#123;item.id&#125; /&gt;);</span><br></pre></td></tr></table></figure>
<h2 id="for-in-中一定要有-hasOwnProperty-的判断（即禁止直接读取原型对象的属性）"><a href="#for-in-中一定要有-hasOwnProperty-的判断（即禁止直接读取原型对象的属性）" class="headerlink" title="for-in 中一定要有 hasOwnProperty 的判断（即禁止直接读取原型对象的属性）"></a>for-in 中一定要有 hasOwnProperty 的判断（即禁止直接读取原型对象的属性）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  arr.push(obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//good</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">    arr.push(obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第三方库函数的使用"><a href="#第三方库函数的使用" class="headerlink" title="第三方库函数的使用"></a>第三方库函数的使用</h2><p>用 try catch 包裹，防止第三方库的出现错误，导致整个程序崩溃</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Echart 用于代绘制图表，但当其自身发生错误时，可能影响到业务代码的执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> iniDom = <span class="built_in">document</span>.getElementById(<span class="string">'init-container'</span>);</span><br><span class="line"><span class="keyword">const</span> echartObj = echarts.init(iniDom);</span><br><span class="line"><span class="keyword">this</span>.setState(</span><br><span class="line">  &#123;</span><br><span class="line">    echartObj</span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; echartObj &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="comment">// 更新图表</span></span><br><span class="line">    echartObj.setOption(CHART_CONFIG, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> iniDom = <span class="built_in">document</span>.getElementById(<span class="string">'init-container'</span>);</span><br><span class="line">  <span class="keyword">const</span> echartObj = echarts.init(iniDom);</span><br><span class="line">  <span class="keyword">this</span>.setState(</span><br><span class="line">    &#123;</span><br><span class="line">      echartObj</span><br><span class="line">    &#125;,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; echartObj &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">      <span class="comment">// 更新图表</span></span><br><span class="line">      echartObj.setOption(CHART_CONFIG, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="防止-xss-攻击"><a href="#防止-xss-攻击" class="headerlink" title="防止 xss 攻击"></a>防止 xss 攻击</h2><p>input，textarea 等标签，不要直接把 html 文本直接渲染在页面上,使用 xssb 等过滤之后再输出到标签上;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; html2text &#125; <span class="keyword">from</span> <span class="string">'xss'</span>;</span><br><span class="line">render()&#123;</span><br><span class="line">  &lt;div</span><br><span class="line">  dangerouslySetInnerHTML=&#123;&#123;</span><br><span class="line">    __html: html2text(htmlContent)</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在组件中获取真实-dom"><a href="#在组件中获取真实-dom" class="headerlink" title="在组件中获取真实 dom"></a>在组件中获取真实 dom</h2><p>使用 16 版本后的 createRef()函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">iProps</span>, <span class="title">iState</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.inputRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;input type="text" ref=&#123;this.inputRef&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.inputRef.current.focus();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="减少魔法数字"><a href="#减少魔法数字" class="headerlink" title="减少魔法数字"></a>减少魔法数字</h2><p>写代码的时候尽量减少一些未知含义的数字，尽量用英文单词。例如type === 0的时候做了一些操作，让人不知所以然。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (type !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> STATUS: Record&lt;string, any&gt; = &#123;</span><br><span class="line">  READY: <span class="number">0</span>,</span><br><span class="line">  FETCHING: <span class="number">1</span>,</span><br><span class="line">  FAILED: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type === STATUS.READY) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">enum STATUS &#123;</span><br><span class="line">  <span class="comment">// 就绪</span></span><br><span class="line">  READY = <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 请求中</span></span><br><span class="line">  FETCHING = <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// 请求失败</span></span><br><span class="line">  FAILED = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如果需要优化-react-性能（一般用不到）"><a href="#如果需要优化-react-性能（一般用不到）" class="headerlink" title="如果需要优化 react 性能（一般用不到）"></a>如果需要优化 react 性能（一般用不到）</h2><p>如果组件的 state 和 props 都是简单类型，可以继承 PureComponent 而不是 Component</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;span&gt;&#123;this.state.message&#125;&lt;/span&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;span&gt;&#123;this.state.message&#125;&lt;/span&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Event-事件对象类型"><a href="#Event-事件对象类型" class="headerlink" title="Event 事件对象类型"></a>Event 事件对象类型</h2><p>很多小伙伴用了很久的ts,都不知道常用 Event 事件对象类型：<br>ClipboardEvent<t = element> 剪贴板事件对象<br>DragEvent<t = element> 拖拽事件对象<br>ChangeEvent<t = element> Change 事件对象<br>KeyboardEvent<t = element> 键盘事件对象<br>MouseEvent<t = element> 鼠标事件对象<br>TouchEvent<t = element> 触摸事件对象<br>WheelEvent<t = element> 滚轮事件对象<br>AnimationEvent<t = element> 动画事件对象<br>TransitionEvent<t = element> 过渡事件对象</t></t></t></t></t></t></t></t></t></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MouseEvent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  onClick(event: MouseEvent&lt;HTMLDivElement&gt;): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用私有属性取代state状态"><a href="#使用私有属性取代state状态" class="headerlink" title="使用私有属性取代state状态"></a>使用私有属性取代state状态</h2><p>对于一些不需要控制ui的状态属性，我们可以直接绑到this上， 即私有属性，没有必要弄到this.state上，不然会触发渲染机制，造成性能浪费 例如请求翻页数据的时候,我们都会有个变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">state: IState = &#123;</span><br><span class="line">  pageNo:<span class="number">1</span>,</span><br><span class="line">  pageSize:<span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good </span></span><br><span class="line">queryParams:Record&lt;string,any&gt; = &#123;</span><br><span class="line">  pageNo:<span class="number">1</span>,</span><br><span class="line">  pageSize:<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代码细粒度的思考"><a href="#代码细粒度的思考" class="headerlink" title="代码细粒度的思考"></a>代码细粒度的思考</h2><p>总结四句话。我们在写组件或者函数的的时候，工具函数和业务逻辑抽离，表单校验和业务抽离、事件函数和业务抽离，ajax和业务抽离。<br>例如有些页面是通过location.href跳转的，我们有些业务逻辑等都是放到didmountMount,但是后期改需求，可能要用react-router进行跳转，可能要改的逻辑就会很多了，所以函数抽离出来，需求更新就少改一点代码。<br>如果还不确定如何划分函数的细粒度，我有个建议。使用过两次以上的代码，要抽离组件或者函数，两次的可以不用</p>
<h2 id="if-else-等判断太多了，后期难以维护。"><a href="#if-else-等判断太多了，后期难以维护。" class="headerlink" title="if else 等判断太多了，后期难以维护。"></a>if else 等判断太多了，后期难以维护。</h2><p>个人觉得if else 嵌套深看起来也不会太难受，难受的是，项目迭代久之后，自己都忘记曾经写过这些代码，而且类型多或者不确定有什么类型，是否后期还会加的情况下，改起来就非常复杂了，而且很容易踩坑和背锅。<br>用配置取代if嵌套，大概就是抽离一个config.ts出来，里面放一些配置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">例如你的业务代码里面，会根据不同url参数，代码会执行不同的逻辑.</span><br><span class="line">/info?type=wechat&amp;uid=<span class="number">123456</span>&amp;</span><br><span class="line"><span class="keyword">const</span> qsObj = qs(<span class="built_in">window</span>.location.url)</span><br><span class="line"><span class="keyword">const</span> urlType = qsObj.type</span><br><span class="line"><span class="comment">// bad </span></span><br><span class="line"><span class="keyword">if</span> (urlType === <span class="string">'wechat'</span>) &#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good </span></span><br><span class="line">config.t</span><br><span class="line"><span class="keyword">const</span> urlTypeConfig: Record&lt;string, typeItem&gt; = [</span><br><span class="line">  <span class="string">'wechat'</span>: &#123; <span class="comment">// key 就是对应的type</span></span><br><span class="line">    name: <span class="string">'wechat'</span>, </span><br><span class="line">    show: [<span class="string">'header'</span>, <span class="string">'footer'</span>, <span class="string">'wechat'</span>] <span class="comment">// 展示什么，可能是异步的</span></span><br><span class="line">    pession: [<span class="string">'admin'</span>], <span class="comment">// 权限是什么，可能是异步的</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'zhifubao'</span>: &#123; <span class="comment">// key 就是对应的type</span></span><br><span class="line">    name: <span class="string">'zhifubao'</span>, </span><br><span class="line">    show: [<span class="string">'header'</span>, <span class="string">'footer'</span>, <span class="string">'zhifubao'</span>] <span class="comment">// 展示什么，可能是异步的</span></span><br><span class="line">    pession: [<span class="string">'admin'</span>], <span class="comment">// 权限是什么，可能是异步的</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务逻辑</span></span><br><span class="line"><span class="keyword">const</span> qsObj = qs(<span class="built_in">window</span>.location.url)</span><br><span class="line"><span class="keyword">const</span> urlType = qsObj.type</span><br><span class="line">urlTypeConfig.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(urlType === item.type) &#123;</span><br><span class="line">    doSomeThing(item.show)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="不要使用renderXXX-要使用函数式组件"><a href="#不要使用renderXXX-要使用函数式组件" class="headerlink" title="不要使用renderXXX,要使用函数式组件"></a>不要使用renderXXX,要使用函数式组件</h2><p>发现团队一些小伙伴为了减少render函数里面的代码量，会把一些元素拆分到函数里面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">  renderHeader = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">  renderBody = () =&gt; &#123;</span><br><span class="line">    return (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">  renderFooter = () =&gt; &#123;</span><br><span class="line">    return (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        renderHeader()</span><br><span class="line">        renderBody()</span><br><span class="line">        renderFooter()</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>更好的办法，是用函数式组件取代在当前组件里面写方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">RenderHeader</span>(<span class="params">props</span>) =  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line"> function RenderBody(props) =  &#123;</span><br><span class="line">    return (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line"> function RenderFooter(props) =  &#123;</span><br><span class="line">    return (&lt;div /&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">class Component extends React.Component&lt;iProps, iState&gt;&#123;  </span><br><span class="line">  render () &#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;RenderHeader /&gt;</span><br><span class="line">        &lt;RenderBody /&gt;</span><br><span class="line">        &lt;RenderFooter /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="a标签安全问题"><a href="#a标签安全问题" class="headerlink" title="a标签安全问题"></a>a标签安全问题</h2><p>使用a标签打开一个新窗口过程中的安全问题。新页面中可以使用window.opener来控制原始页面。如果新老页面同域，那么在新页面中可以任意操作原始页面。如果是不同域，新页面中依然可以通过window.opener.location，访问到原始页面的location对象<br>在带有target=”_blank”的a标签中，加上rel=”noopener”属性。如果使用window.open的方式打开页面，将opener对象置为空。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newWindow = <span class="built_in">window</span>.open();</span><br><span class="line">newWindow.opener = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<h2 id="void-0-替代undefined"><a href="#void-0-替代undefined" class="headerlink" title="void 0 替代undefined"></a>void 0 替代undefined</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clearSessioin = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	</span><br><span class="line">  req.session.userName = <span class="literal">undefined</span>;</span><br><span class="line">  </span><br><span class="line">  req.session.userName = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前端不要操作cookie"><a href="#前端不要操作cookie" class="headerlink" title="前端不要操作cookie"></a>前端不要操作cookie</h2><p>在做一些前后端鉴权的时候，后端应该开启domain,secure,httponly严格模式，禁止前端操作cookie，防止csrf攻击。</p>
<blockquote>
<p>转载自：<a href="https://juejin.im/post/5ce24f8ae51d45106477bd45" target="_blank" rel="noopener">https://juejin.im/post/5ce24f8ae51d45106477bd45</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;h3 id=&quot;文件顶部的注释，包括描述、作者、日期&quot;&gt;&lt;a href=&quot;#文件顶部的注释，包括描述、作者、日期&quot; class=&quot;headerlink&quot; title=&quot;文件顶部的注释，包括描述、作者、日期&quot;&gt;&lt;/a&gt;文件顶部的注释，包括描述、作者、日期&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @description xxxxxx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @author chengfeng&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @since 19/05/21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模块的注释&quot;&gt;&lt;a href=&quot;#模块的注释&quot; class=&quot;headerlink&quot; title=&quot;模块的注释&quot;&gt;&lt;/a&gt;模块的注释&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 拷贝数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param  &amp;#123;*&amp;#125;  data   要拷贝的源数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param  &amp;#123;boolean&amp;#125; [isDeep=false] 是否深拷贝，默认浅拷贝&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @return &amp;#123;*&amp;#125;         返回拷贝后的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;业务代码注释&quot;&gt;&lt;a href=&quot;#业务代码注释&quot; class=&quot;headerlink&quot; title=&quot;业务代码注释&quot;&gt;&lt;/a&gt;业务代码注释&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*业务代码注释*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;变量注释&quot;&gt;&lt;a href=&quot;#变量注释&quot; class=&quot;headerlink&quot; title=&quot;变量注释&quot;&gt;&lt;/a&gt;变量注释&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface IState &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 电话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  phone: number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  address: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="typescript" scheme="https://shizhonghai.github.io/tags/typescript/"/>
    
  </entry>
  
</feed>
